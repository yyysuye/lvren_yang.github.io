<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sensitive</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 05 Mar 2019 09:52:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>计算机科学概论</title>
      <link>http://yoursite.com/2019/03/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>http://yoursite.com/2019/03/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 05 Mar 2019 08:50:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;第二部分-信息层&quot;&gt;&lt;a href=&quot;#第二部分-信息层&quot; class=&quot;headerlink&quot; title=&quot;第二部分 信息层&quot;&gt;&lt;/a&gt;第二部分 信息层&lt;/h2&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;二进制数值和技术系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1数字和计算&lt;/p&gt;
&lt;p&gt;计算机 0和1&lt;/p&gt;
&lt;p&gt;自然数、有理数、无理数&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="第二部分-信息层"><a href="#第二部分-信息层" class="headerlink" title="第二部分 信息层"></a>第二部分 信息层</h2><ol start="2"><li><p>二进制数值和技术系统</p></li><li><p>1数字和计算</p><p>计算机 0和1</p><p>自然数、有理数、无理数</p><a id="more"></a><p>数字：抽象数学系统的一个单位，服从算术法则</p><p>自然数：0或者通过在0上重复加1得到的任何数</p><p>负数：小于0的数，是在相应的正数前加上负号</p><p>整数：自然数、自然数的负数或0</p><p>有理数：整数或两个整数的商（不包括被0除的情况）</p></li><li><p>2位置记数法</p><p>基数：记数系统的基本数值，规定了这个系统中使用的数字量和数位位置的值</p><p>最右边的数位表示它的值乘以基数的0次幂，向左一位的数位表示值乘以基数的1次幂，以此类推</p><p>位置记数法：一种表达数字的系统，数位按顺序排列，每个数位有一个位值，数字的值是每个数位和位值的乘积之和</p><p>散列法</p></li><li><p>2.1 二进制、八进制和十六进制</p></li><li><p>数据表示法</p></li><li><p>1数据和计算机</p><p>数据：data，基本值或事实</p><p>信息：information，用有效的方式组织或处理过的数据</p><p>多媒体：multimedia，几种不同的媒体类型</p><p>数据压缩：data compression，减少一段数据所需的空间</p><p>带宽：bandwidth，在固定时间从一个地点传输到另一个地点的最大位数或字节数</p><p>压缩率：compression ratio，原始数据的大小除压缩后数据的大小</p><p>无损压缩：lossless compression，不会丢失信息的数据压缩技术</p><p>有损压缩：lossy compression，会丢失信息的数据压缩技术</p></li><li><p>1.1模拟数据和数字数据</p><p>模拟数据：analog data，用连续形式表示的信息</p><p>数字数据：digital data，用离散形式表示的信息</p><p>数字化：digitize，把信息分割成离散的片段</p><p>脉冲编码调制：pulse-code modulation：电信号在两个极端之间跳跃的变化</p><p>重新计时：reclock，在信号降级太多之前将它重置为原始状态的行为</p></li><li><p>1.2二进制表示法</p><p>n位二进制数字能表示2的n次方种状态</p><p>每当可用的位数增加一位，可以表示的状态的数量就会多一倍</p></li><li><p>2数字数据的表示法</p></li><li><p>2.1负数表示法</p><p>符号数值表示法：singed-magnitude representation,符号表示数所属的分类（正数或负数），值表示数的量值的数字表示法    </p><p>对带符号的整数执行加法和减法操作，可以被描述为向一个方向或另一个方向移动一定的数字单位</p><p>定长量数</p><p>定量的数值 一般数表示正数，一般数表示负数，符号由数的量值表示</p><p>计算负数表示法：</p><p>​    Negative(I)=10的k次幂-I，k表示数字个数</p><p>十进制补码：一种负数表示法，负数I用10的k次幂减I表示</p><p>二进制补码：负数的最左边一位总是1</p><p>数字溢出</p><p>​    溢出：overflow，给结果预留的位数存不下计算出的值的状况</p></li><li><p>2.2实数表示法</p><p>小数点：radix point，在记数系统中，把一个实数分割成整数部分和小数部分的点</p><p>浮点表示法：floating point，标明了符号、尾数和指数的实数表示法</p><p>符号×尾数×2exp</p><p>科学记数法：</p></li><li><p>3文本表示法</p><p>字符集：character set，字符和表示它们的代码的清单</p></li><li><p>3.1ASCII字符集：用8位表示每个字符，表示256个字符</p></li><li><p>3.2Unicode字符集：使用16位表示每个字符，能表示2的16次幂个字符，即6万5千多个字符；unicode字符前256个与扩展ascII字符集中完全一样，被称为它的超集</p></li><li><p>3.3文本压缩</p><p>关键字编码：keyword encoding，用单个字符代替常用的单词</p><p>行程长度编码（迭代编码）：run-length encoding。把一系列重复字符替换为它们重复出现的次数</p><p>赫夫曼编码：Huffman encoding：用变长的二进制表示字符，使常用的字符具有较短的编码；</p></li><li><p>4音频信息表示法</p></li><li><p>4.1音频格式</p><p>WAV、AU、AIFF、MP3</p><p>基于从模拟信号采样得到电压值</p></li><li><p>4.2MP3音频格式</p><p>MPEG-2 audio layer 3的缩写</p><p>有损压缩</p><p>无损压缩</p></li><li><p>5图像与图形的表示法</p></li><li><p>5.1颜色表示法</p><p>颜色是我们对到达视网膜的各种频率的光的感觉，我们的视网膜有三种颜色感光视锥细胞，负责接收不同频率的光。这些感光器分类分别对应红、绿和蓝三种颜色。人眼可以觉察的其他颜色都能由这三种颜色混合而成.</p><p>颜色通常用RGB表示,(0,0,0)表示黑色</p><p>用于表示颜色的数据量称为色深度,通常用表示颜色的位数来表示色深度,增强彩色指色深度为16位,每个数字由5位表示,剩余一位位透明度,真彩色指色深度为24位,每个数字由8位表示,每个范围为0~255;</p></li><li><p>5.2数字化图像和图形</p><p>数字化一幅图像是把它表示为一套独立的点,这些点称为像素,代表图像的元素.每个像素由一种颜色构成,表示一幅图像使用的像素个数称为分辨率.</p><p>像素:pixels,用于表示图像的独立点,代表图像的元素;</p><p>分辨率:resolution,用于表示图像的像素个数</p><p>光栅图像格式:raster-graphics format:逐个像素存储图像信息的格式</p><p>位图(BMP):</p><p> GIF :只能由256种颜色构成</p><p>JPEG:</p><p>PNG:</p></li><li><p>5.3图形的矢量表示法</p><p>矢量图形:vector graphics,用线段或几何形表示图像的方法;SVG</p><p>IPEG图像是表示真实世界图像的首选</p><p>矢量图形则适用于艺术线条和卡通绘画</p></li><li><p>6视频表示法</p><p>视频编译码器:video codec,用于缩减电影大小的方法</p><p>两种压缩方式:时间压缩和空间压缩</p><p>时间压缩:temporal compression,根据连续帧之间的差别压缩电影的技术</p><p>空间压缩:spatial compression,基于静态图像的压缩方法的电影压缩技术</p></li></ol><h2 id="第三部分-硬件层"><a href="#第三部分-硬件层" class="headerlink" title="第三部分 硬件层"></a>第三部分 硬件层</h2><ol start="4"><li><p>门和电路</p></li><li><p>1计算机和电学</p><p>一般来说,0-2V是低电压,由数字0表示,2-5V是高电压,由数字1表示</p><p>门:gate,对电信号执行基本运算的设备,接受一个或多个输入信号,生成一个输出信号</p><p>电路:circuit,相互关联的门的组合,用于实现特定的逻辑函数</p><p>布尔代数:Boolean algebra,表示二值逻辑函数的数学表示法</p><p>逻辑框图:logic diagram,电路的图形化表示,每种类型的门有自己专用的符号</p><p>真值表:truth table,列出了所有可能的输入值和相关的输出值的表</p></li><li><p>2门</p></li><li><p>2.1非门</p></li></ol><p><img src="../images/computer science illuminated/Image.png" alt="img"></p><p>​    又叫逆变器</p><p>​    非门的逻辑框图符号是一个末端具有小圈圈(叫做求逆泡)的三角形</p><ol start="4"><li>2.2与门</li></ol><p><img src="../images/computer science illuminated/Image(1" alt="img">.png)</p><p>​    运算符通常可以省略</p><ol start="4"><li>2.3或门</li></ol><p><img src="../images/computer science illuminated/Image(2" alt="img">.png)</p><ol start="4"><li>2.4异或门</li></ol><p>如果异或门的两个输入相同,则输出为0,否则,输出为1</p><p><img src="../images/computer science illuminated/Image(3" alt="img">.png)</p><p>​    正规的或门又叫做同或门</p><ol start="4"><li><p>2.5与非门和或非门</p><p>分别是与门和或门的对立门</p></li></ol><p><img src="../images/computer science illuminated/Image(4" alt="img">.png)</p><ol start="4"><li><p>2.6门处理回顾</p><p>非门将对它的唯一输入指求逆</p><p>如果两个输入值都是1,与门将生成1</p><p>如果一个输入值是1,或者两个输入值都是1,或门将生成1</p><p>与非门生成的结果和与门生成的相反</p><p>或非门生成的结果与或门生成的相反</p></li><li><p>2.7具有更多输入的门</p><p>门可以被设计为接受三个或更多个输入值</p></li></ol><p><img src="../images/computer science illuminated/Image(5" alt="img">.png)</p><ol start="4"><li><p>3门的构造</p><p>晶体管</p><p>门使用晶体管建立输入值和输出值之间的映射</p><p>一种是传导电流的电线,另一种是阻止电流的电阻器,输入信号的电压电平决定了晶体管的角色</p><p>由半导体材料制成,通常使用硅</p><p>晶体管:transistor,作为导线或电阻器的设备,由输入信号的电压电平决定它的作用</p><p>半导体:semiconductor,既不是良好的导体也不是绝缘体的材料,如硅</p></li></ol><p><img src="../images/computer science illuminated/Image(6" alt="img">.png)</p><p>​    晶体管具有三个接线端:源极 基极 发射极 </p><p>​    发射机通常被连接到地线</p><p>​    源极制造的是高电压 约5V,基极值控制的门决定是否把源极接地,接地被降至0V</p><p>​    通常,源极连线上有一条输出连线,如果源极信号接地,输出电压是低电压,0,如果仍为高电压,输出也是    高电压,1</p><p>​    晶体管只能为开(生成高电压输出)或关(生成低电压输出),由基极电信号决定,如果基极信号为高信号,源极信号接地,关闭晶体管,如果基极信号是低电压,源极信号仍是高电压,晶体管被打开</p><p><img src="../images/computer science illuminated/Image(7" alt="img">.png)</p><ol start="4"><li><p>4电路</p><p>组合电路:combinational circuit,输出仅由输入值决定的电路</p><p>时序电路:sequential circuit,输出是输入值和电路当前状态的函数的电路</p></li><li><p>4.1组合电路</p><p>电路等价:circuit equivalence,对应每个输入值组合,两个电路都生成完全相同的输出</p></li></ol><p><img src="../images/computer science illuminated/Image(8" alt="img">.png)</p><p>​    德 摩根定律:对两个变量的与操作的结果进行非操作,等于对每个变量的进行非操作后再对他们进行或操作;(AB)<code>=A</code>+B`</p><p>​    对两个变量的或操作的结果进行非操作,等于对每个变量的进行非操作后再对他们进行与操作;(A+B)<code>=A</code>B`</p><ol start="4"><li><p>4.2加法器</p><p>加法器:adder,对二进制值执行加法运算的电路</p><p>半加器:half adder,计算两个数位的和并生成正确进位的电路</p><p>半加器不会把进位(进位输入)考虑在计算之内,所以只能计算两个数位的和</p></li></ol><p><img src="../images/computer science illuminated/Image(9" alt="img">.png)</p><p><img src="file:///F:/blog/blog/source/images/computer science illuminated/Image(10" alt="img">.png)</p><p>​    全加器:full adder.计算两个数位的和,并考虑进位输入的电路</p><p><img src="../images/computer science illuminated/Image(12" alt="img">.png)</p><p>​    几位相加重复几次全加器电路,一个位值的进位输出为下一个位值的仅为输入,最右边的位的进位输入为0,和为本位的值,最左边的进位输出将被舍弃,通常会生成溢出错误</p><ol start="4"><li><p>4.3多路复用器</p><p>多路复用器:multiplexer,使用一些输入控制信号决定用哪条输入数据线发送输出信号的电路;</p></li></ol><p><img src="../images/computer science illuminated/Image(13" alt="img">.png)</p><p>​    一般来说,n条输入控制线的二进制值决定了选择2的n次幂条数据线中的哪一条</p><p>​    多路分配器执行相反操作</p><ol start="4"><li>5存储器电路</li></ol><p><img src="../images/computer science illuminated/Image(14" alt="img">.png)</p><p>​    两个输出X和Y互补,当X为1时,Y是0</p><ol start="4"><li><p>6集成电路</p><p>集成电路:integrated circuit,又称芯片,是嵌入了多个门的硅片</p></li></ol><p><img src="../images/computer science illuminated/Image(15" alt="img">.png)</p><p><img src="../images/computer science illuminated/Image(16" alt="img">.png)</p><ol start="4"><li><p>7CPU芯片</p><p>cpu是一种具有输入线和输出线的高级电路</p></li><li><p>计算部件</p></li><li><p>1独立的计算机部件</p></li></ol><p>​    </p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/03/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JS权威指南读书笔记</title>
      <link>http://yoursite.com/2019/01/09/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <guid>http://yoursite.com/2019/01/09/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Wed, 09 Jan 2019 10:25:00 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;关于js：动态的，弱类型的；面向对象和函数式；语法缘与java，一等函数源于Scheme，基于原型的继承来源于Self；&lt;/li&gt;
&lt;/ol&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ol><li>关于js：动态的，弱类型的；面向对象和函数式；语法缘与java，一等函数源于Scheme，基于原型的继承来源于Self；</li></ol><a id="more"></a><ol start="2"><li><p>语言核心：</p><ul><li><p>Unicode字符集</p></li><li><p>区分大小写，但是html不区分大小写，比如说html中可以将事件处理程序写成onClick,但是js中只能写成onclick</p></li><li><p>注释：//和/**/</p></li><li><p>直接量：程序中直接使用的数据值</p></li><li><p>标识符：对变量和函数进行和命名；字母、下划线、或$开头，后续可以是字母，数字，下划线和$</p></li><li><p>保留字</p></li><li><p>分号：为了防止前一句语句分号不小心被修改或者省略，可以在语句之前加上一个分号；</p></li><li><p>在return break continue和随后的表达式之间不能有换行，</p></li><li><p>在涉及“++”和“–”的时候，与表达式应当在同一行；</p></li><li><p>数据类型：原始类型（数字、字符串、布尔值、null和undefined）和对象类型；</p></li><li><p>对象是属性的集合，属性由名/值对组成；</p></li><li><p>特殊的对象：全局对象；普通对象是“命名值”的无序集合；数组表示带编号的有序集合；特殊的对象；特殊的对象3：函数；具有与它相关联的可执行代码的对象；如果函数用来初始化（使用new运算符）一个新建的对象，称为（constructor）构造函数；每个构造函数定义了一类（class）对象——由构造函数初始化的对象组成的集合；类可以看做是对象类型的子类型。Array类、Function类、Date类、RegExp类、Error类；</p></li><li><p>数据类型本身可以调用方法来操作值；如数组a.sort();值也可以拥有方法，但是只有null和undefined无法拥有方法；数据类型也可分为拥有方法的类型和不能拥有方法的类型；可变类型和不可变类型；对象和数组属于可变类型；js程序可以更改对象属性值和数组元素的值；数字、布尔值、null和undefined属于不可变类型；字符串可以看成由字符组成的数组；在js中不可变；</p></li><li><p>可以进行数据类型转换；</p></li><li><p>变量是无类型的；</p></li></ul></li><li><p>数字：</p><ul><li><p>js不分整数值和浮点数值；所有数字均用浮点数表示；数字直接量</p></li><li><p>整形直接量：十进制；十六进制0x/0X；八进制0，严格模式禁止八进制</p></li><li><p>浮点型直接量：实数写法或指数计数法；</p></li><li><p>算术运算：+-*/%(基本)；Math.paw(2,53)(复杂)</p></li><li><p>溢出、下溢和被零整除不会报错；</p></li><li><p>全局变量Infinity和NaN表示无穷大和非数值，只读；</p></li></ul></li><li><p>字符串直接量：</p><ul><li><p>\反斜可以将字符串拆分数行</p></li><li><p>转义字符</p></li><li><p>字符串使用：</p></li><li><p>+：连接</p></li><li><p>s.length：长度；</p></li><li><p>在js中字符串是固定不变的；</p></li><li><p>RegExp具有实用API的特殊对象；</p></li></ul></li><li><p>布尔值：</p><ul><li><p>true和false</p></li><li><p>任何js的值都可转换成布尔值；</p></li><li><p>转换成false：undefined、null、0、-0、NaN、””；</p></li><li><p>其他转换成true</p></li></ul></li><li><p>null:</p><ul><li><p>常用来描述空值；</p></li><li><p>typeof null 返回object；特殊的对象值，非对象</p></li></ul></li><li><p>undefined:</p><ul><li><p>预定义的全局变量；只读</p></li><li><p>typeof undefined  返回undefined</p></li></ul></li><li><p>对象：</p><ul><li><p>是一种复合值，是属性或已命名值的集合；</p></li><li><p>字符串有自己的属性方法，当引用字符串的属性，会将字符串通过调用new String（s）的方式转换成对象，这个对象继承字符串的方法，并被用来处理属性的引用，一旦属性引用结束，新创建的对象就会销毁，看起来是这样；数字和布尔值也有各自的方法；</p></li><li><p>var s = “test”;s.len=4;var t =s,len;//t为undefined；</p></li><li><p>存取字符串、数字或布尔值的属性时创建的临时对象称做包装对象；</p></li><li><p>字符串、数字和布尔值的属性都是只读的；</p></li><li><p>可通过String()，Number()或Boolean()构造函数来显式创建包装对象</p></li><li><p>“==”等于运算符将原始值和其包装对象视为相等，但“===”全等运算符将它们视为不等</p></li><li>原始值不可变，原始值的比较是值的比较；</li><li>将对象称为引用类型，对象值都是引用，对象的比较均是引用的比较，当且仅当它们引用同一个基对象时，才相等；</li></ul></li><li><p>类型转换：</p><p><img src="http://pjx6k98jg.bkt.clouddn.com/Image.png" alt=""></p></li><li><p>显示类型转换：</p><ul><li><p>做显式类型转换最简单的方法就是使用Boolean()、Number()、String()或Object()函数</p></li><li><p>除了null或undefined之外的任何值都具有toString()方法；</p></li><li><p>Number类定义的toString()方法可以接收表示转换基数（radix）[6]的可选参数，如果不指定此参数，转换规则将是基于十进制</p></li></ul></li><li><p>对象转换为原始值：</p><ul><li>对象到布尔值的转换非常简单：所有的对象（包括数组和函数）都转换为true。对于包装对象亦是如此：new Boolean(false)是一个对象而不是原始值，它将转换为true；</li></ul></li><li><p>声明变量：</p><ul><li><p>全局变量和局部变量，局部作用域嵌套</p></li><li><p>函数内，局部变量的优先级高于全局变量</p></li><li><p>函数作用域：在函数内声明的所有变量在函数体内始终是可见的；导致声明提前；</p></li><li><p>当声明一个js全局变量时，实际是定义全局对象的一个属性；</p></li></ul></li></ol><h2 id="二、表达式与运算符"><a href="#二、表达式与运算符" class="headerlink" title="二、表达式与运算符"></a>二、表达式与运算符</h2><ol><li><p>原始表达式</p><ul><li><p>直接量、关键字、变量</p></li><li><p>关键字可以是原始表达式，比如true、false、null、this（返回“当前”对象）</p></li></ul></li><li><p>数组初始化表达式：</p><ul><li><p>[,,,]；</p></li><li><p>数组可以嵌套；对数组初始化表达式求值的时候，内部的元素表达式会各自计算一次，所以每次计算的值有可能是不同的；列表之间的逗号可以省略，会填补undefined，结尾处留下单个逗号，不会添加undefined元素</p></li><li><p>对象初始化表达式可称为对象直接量：{属性名：属性值，，，}；可以嵌套；</p></li></ul></li><li><p>函数定义表达式：</p><ul><li>也可称为函数直接量；function（，，，）{}</li></ul></li><li><p>属性访问表达式：</p><ul><li>expression.identifer或者expression[expression]; </li><li>得到一个对象属性或者一个数组元素的值；</li></ul></li><li><p>调用表达式：</p><ul><li>一种调用函数或者方法的语法表示；函数表达式(,,,);</li></ul></li><li><p>对象创建表达式：</p><ul><li><p>创建一个对象并且调用构造函数初始化新对象的属性；</p></li><li><p>new Object();如果不传参，()可以省略</p></li></ul></li><li><p>运算符：</p><blockquote><p>算术表达式、比较表达式、逻辑表达式和赋值表达式；</p></blockquote><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt=""></p></li><li><p>关系表达式：</p><ul><li><p>相等和不等：</p><p>=、==、===：赋值、相等、恒等</p><p>对于数字和字符串操作符来说，加号运算符和比较运算符的行为都有所不同，前者更偏爱字符串，如果它的其中一个操作数是字符串的话，则进行字符串连接操作。而比较运算符则更偏爱数字，只有在两个操作数都是字符串的时候，才会进行字符串的比较</p></li><li><p>in运算符</p><p>in运算符希望它的左操作数是一个字符串或可以转换为字符串，希望它的右操作数是一个对象；</p><p>如果右侧的对象拥有一个名为左操作数值的属性名，那么表达式返回true</p></li><li><p>instanceof</p><p>instanceof运算符希望左操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true；否则返回false；</p></li></ul></li><li><p>逻辑表达式：</p><ul><li><p>逻辑与&amp;&amp;：</p><ol><li>当操作数都是布尔值的时候，&amp;&amp;对两个值执行布尔与操作，只有两个数都是true的时候返回true；</li><li><p>操作数并不一定是布尔值，假值：null、undefined、NaN、0、-0、false、“”；&amp;&amp;可以对真值和假值进行布尔与操作，如果都为真，返回真值，至少一个为假，返回一个假值；</p></li><li><p>运算符首先计算左操作数的值， 如果是假值，则结果为假，所以此时返回左值，不会计算右值；如果左值为真，计算右值，如果右值为真，结果为真，如果右值为假，则整个表达式也为假，所以左值为真，返回右值；</p></li></ol></li><li><p>逻辑或||：</p><p> 会首先计算左侧的表达式。如果计算结果为真值，那么返回这个真值。否则，再计算第二个操作数的值，即计算右侧的表达式，并返回这个表达式的计算结果；</p></li><li><p>逻辑非！：</p><p> 将操作数的布尔值进行求反；“!”运算符首先将其操作数转换为布尔值，，然后再对布尔值求反。也就是说“!”总是返回true或者false，并且，可以通过使用两次逻辑非运算来得到一个值的等价布尔值：!!x</p></li></ul></li><li><p>表达式计算：</p><ul><li>JavaScript同样可以解释运行由JavaScript源代码组成的字符串，并产生一个值；eval();是一个运算符也是一个函数；</li><li>eval()只有一个参数。如果传入的参数不是字符串，它直接返回这个参数。如果参数是字符串，它会把字符串当成JavaScript代码进行编译（parse）；</li><li>如果编译失败则抛出一个语法错误（SyntaxError）异常。如果编译成功，则开始执行这段代码，并返回字符串中的最后一个表达式或语句的值，如果最后一个表达式或语句没有值，则最终返回undefined；</li><li>eval()使用了调用它的变量作用域环境；</li><li>直接调用eval()时，它总是在调用它的上下文作用域内执行；</li><li>其他的间接调用则使用全局对象作为其上下文作用域，并且无法读、写、定义局部变量和函数；</li></ul></li><li><p>其他运算符：</p><ul><li><p>条件运算符：三元运算符，？：</p><ul><li>条件运算符的操作数可以是任意类型。第一个操作数当成布尔值，如果它是真值，那么将计算第二个操作数，并返回其计算结果。否则，如果第一个操作数是假值，那么将计算第三个操作数，并返回其计算结果</li></ul></li><li><p>typeof运算符：放在其单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串；typeof可以带上()：typeof(i);</p><p><img src="http://pjx6k98jg.bkt.clouddn.com/typeof.png" alt=""></p></li><li><p>delete运算符：</p><p>删除对象属性或者数组元素；删除了数组的元素，但是数组的长度仍然没有改变；</p><p>delete希望他的操作数是一个左值，如果它不是左值，那么delete将不进行任何操作同时返回true；否则，delete将试图删除这个指定的左值；如果删除成功，delete将返回true</p><p>一些内置核心和客户端属性是不能删除的，用户通过var语句声明的变量不能删除；</p><p>通过function语句定义的函数和函数参数也不能删除；</p></li><li><p>void运算符</p><p>void是一元运算符，它出现在操作数之前，操作数可以是任意类型。不常用；</p></li><li><p>逗号运算符：二元运算符，它的操作数可以是任意类型。</p><p>它首先计算左操作数，然后计算右操作数，最后返回右操作数的值；最常用的场景是在for循环中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,j=<span class="number">10</span>;i＜j;i++,j--)</span><br><span class="line"><span class="built_in">console</span>.log(i+j)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="三、语句"><a href="#三、语句" class="headerlink" title="三、语句"></a>三、语句</h2><blockquote><p>js语句是以分号结束；一系列可执行语句的集合；</p><ol><li>表达式语句<ul><li>赋值语句</li></ul></li></ol></blockquote><ul><li><p>递增运算符（++）和递减运算符（–）和赋值语句有关</p></li><li><p>delete运算符的重要作用是删除一个对象的属性，所以，它一般作为语句使用，而不是作为复杂表达式的一部分</p></li><li>函数调用是表达式语句的另一个大类</li></ul><ol start="2"><li><p>复合语句和空语句</p><ul><li>复合语句：将多条语句联合在一起，形成一条复合语句；用花括号括起来；语句块结尾不需要分号；js没有块级作用域；</li><li>空语句：允许包含0条语句的空句；如果有特殊的目的需要使用空语句，最好在代码中添加注释，这样可以更清楚地说明这条空语句是有用的；</li></ul></li><li><p>声明语句</p><blockquote><p>var和function(es6)</p></blockquote><ul><li><p>var:</p><p>用来声明一个或多个变量；</p><p>声明局部变量和全局变量，全局变量是全局对象的属性，var生命的变量无法使用delete删除 ；</p><p>没有指定初始化表达式，则初始值为undefined；</p><p>变量声明提升；</p><p>多次声明</p></li><li><p>function：用来定义函数；尽管函数声明语句和函数定义表达式包含相同的函数名，但二者仍然不同。两种方式都创建了新的函数对象，但函数声明语句中的函数名是一个变量名，变量指向函数对象。和通过var声明变量一样，函数定义语句中的函数被显式地“提前”到了脚本或函数的顶部。因此它们在整个脚本和函数内都是可见的。使用var的话，只有变量声明提前了——变量的初始化代码仍然在原来的位置。然而使用函数声明语句的话，函数名称和函数体均提前：脚本中的所有函数和函数中所有嵌套的函数都会在当前上下文中其他代码之前声明。也就是说，可以在声明一个JavaScript函数之前调用它；</p></li></ul></li><li><p>条件语句</p><ul><li><p>if语句：else总是与就近的if语句匹配；</p></li><li><p>switch：</p><pre><code> case子句中的表达式匹配按照”===“运算符进行；表达式和case的匹配并不会做任何类型转换；</code></pre></li></ul></li><li><p>循环</p><ul><li><p>while(true)：会创建一个死循环；</p></li><li><p>do/while：在循环的底部检测循环表达式；循环体至少会执行一次；</p></li><li><p>for：计数器变量 初始化initialize、检测test、更新increment；for(;;)死循环；省略test表达式，是一个死循环；</p></li><li><p>for/in：</p><pre><code> for(variable in object)statement; variable通常是一个变量名，也可以是一个可以产生左值的表达式或者一个通过var语句声明的变量，总之必须是一个适用于赋值表达式左侧的值；object是一个表达式，这个表达式的计算结果是一个对象；更方便地遍历对象属性成员；在每次循环之前，JavaScript都会先计算variable表达式的值，并将属性名（一个字符串）赋值给它；只可遍历可枚举属性；由JavaScript语言核心所定义的内置方法就不是“可枚举的”；由JavaScript语言核心所定义的内置方法就不是“可枚举的”；代码中定义的所有属性和方法都是可枚举的；对象可以继承其他对象的属性，那些继承的自定义属性也可以使用for/in枚举出来；并没有指定for/in循环按照何种顺序来枚举对象属性；主流浏览器厂商的JavaScript实现是按照属性定义的先后顺序来枚举简单对象的属性，先定义的属性先枚举</code></pre></li></ul></li><li><p>跳转</p><blockquote><p>得JavaScript的执行可以从一个位置跳转到另一个位置；</p></blockquote><ul><li><p>break语句是跳转到循环或者其他语句的结束；</p></li><li><p>continue语句是终止本次循环的执行并开始下一次循环的执行；</p></li><li>JavaScript中的语句可以命名或带有标签，break和continue可以标识目标循环或者其他语句标签；</li><li>return语句让解释器跳出函数体的执行，并提供本次调用的返回值。throw语句触发或者“抛出”一个异常，它是与try/catch/finally语句一同使用的，这些语句指定了处理异常的代码逻辑。这是一种复杂的跳转语句，当抛出一个异常的时候，程序将跳转至最近的闭合异常处理程序，这个异常处理程序可以是在同一个函数中或者在更高层的调用栈中；</li><li>标签语句：identifer:statement；</li><li>break:单独使用是立即退出最内层的循环或者switch语句；可以跟一个语句标签：break labelname；当break和标签一块使用时，程序将跳转到这个标签所标识的语句块的结束，或者直接终止这个闭合语句块的执行；在break关键字和labelname之间不能换行；对于一条带标签的函数定义语句来说，不能从函数内部通过这个标签来跳转到函数外部；</li><li>continue：不管continue语句带不带标签，它只能在循环体内使用。在其他地方使用将会报语法错误；continue语句在while和for循环中的区别，while循环直接进入下一轮的循环条件判断，但for循环首先计算其increment表达式，然后判断循环条件；</li><li>return:只能在函数体内出现；</li><li></li></ul></li><li><p>其他语句类型</p><ul><li>with:临时扩展作用域链；with(object)statement；在严格模式中（参照5.7.3节）是禁止使用with语句的，并且在非严格模式里也是不推荐使用with语句的，尽可能避免使用with语句。那些使用with语句的JavaScript代码非常难于优化，并且同没有使用with语句的代码相比，它运行得更慢；在对象嵌套层次很深的时候通常会使用with语句来简化代码编写；</li><li>debugger:通常什么也不做，当调试程序可用并运行的时候，JavaScript解释器将会（非必需）以调式模式运行；实际上，这条语句用来产生一个断点（breakpoint），JavaScript代码的执行会停止在断点的位置，这时可以使用调试器输出变量的值、检查调用栈等；</li><li>“use strict”:”use strict”是ECMAScript 5引入的一条指令。指令不是语句（但非常接近于语句）;它不包含任何语言的关键字，指令仅仅是一个包含一个特殊字符串直接量的表达式（可以是使用单引号也可以使用双引号），对于那些没有实现ECMAScript 5的JavaScript解释器来说，它只是一条没有副作用的表达式语句，它什么也没做;它只能出现在脚本代码的开始或者函数体的开始、任何实体语句之前。但它不必一定出现在脚本的首行或函数体内的首行；使用”use strict”指令的目的是说明（脚本或函数中）后续的代码将会解析为严格代码（strict code）；<br><img src="https://i.loli.net/2019/01/18/5c4148cf8731e.png" alt="语句.png"></li></ul></li></ol><h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><p>对象：js基本数据类型；</p><p>复合值：将很多值（原始值或者其他对象）聚合在一起，可通过名字访问这些值；</p><p>对象也可看做是属性的无序集合，每个属性都是一个名/值对；属性名是字符串，因此我们可以把对象看成是从字符串到值的映射；</p><p>除了可以保持自有的属性，JavaScript对象还可以从一个称为原型的对象继承属性；</p><p>对象的方法通常是继承的属性。这种“原型式继承”（prototypal inheritance）是JavaScript的核心特征；</p><p>js对象是动态的，可以新增也可以删除属性；</p><p>除了字符串、数字、true、false、null和undefined之外，JavaScript中的值都是对象。尽管字符串、数字和布尔值不是对象，但它们的行为和不可变对象非常类似；</p><p>对象是可变的；通过引用；</p><p>对象最常见的用法是创建（create）、设置（set）、查找（query）、删除（delete）、检测（test）和枚举（enumerate）它的属性；</p><p>属性包括名字和值。属性名可以是包含空字符串在内的任意字符串，但对象中不能存在两个同名的属性；</p><p>值可以是任意JavaScript值，或者（在ECMAScript 5中）可以是一个getter或setter函数（或两者都有）；</p><p>除了名字和值之外，每个属性还有一些与之相关的值，称为“属性特性”（property attribute）：</p><ul><li>可写（writable attribute），表明是否可以设置该属性的值。</li><li>可枚举（enumerable attribute），表明是否可以通过for/in循环返回该属性。</li><li>可配置（configurable attribute），表明是否可以删除或修改该属性。；</li></ul><p>除了包含属性之外，每个对象还拥有三个相关的对象特性（object attribute）：</p><ul><li>对象的原型（prototype）指向另外一个对象，本对象的属性继承自它的原型对象；</li><li>对象的类（class）是一个标识对象类型的字符串；</li><li>对象的扩展标记（extensible flag）指明了（在ECMAScript 5中）是否可以向该对象添加新属性；</li></ul><p>三类对象：</p><ul><li>内置对象：（native object）是由ECMAScript规范定义的对象或类。例如，数组、函数、日期和正则表达式都是内置对象；</li><li>宿主对象（host object）是由JavaScript解释器所嵌入的宿主环境（比如Web浏览器）定义的。客户端JavaScript中表示网页结构的HTMLElement对象均是宿主对象。既然宿主环境定义的方法可以当成普通的JavaScript函数对象，那么宿主对象也可以当成内置对象；</li><li>自定义对象（user-defined object）是由运行中的JavaScript代码创建的对象；</li></ul><p>两种属性：</p><ul><li>自有属性（own property）是直接在对象中定义的属性；</li><li>继承属性（inherited property）是在对象的原型对象中定义的属性 </li></ul><ol><li><p>创建对象</p><ul><li><p>对象直接量、关键字new和Object.create()函数(es5);对象直接量：由若干名/值对组成的映射表，名/值对中间用冒号分隔，名/值对之间用逗号分隔，整个映射表用花括号括起来。属性名可以是JavaScript标识符也可以是字符串直接量（包括空字符串）。属性的值可以是任意类型JavaScript表达式，表达式的值（可以是原始值也可以是对象值）就是这个属性的值；</p></li><li><p>对象直接量是一个表达式，这个表达式的每次运算都创建并初始化一个新的对象。每次计算对象直接量的时候，也都会计算它的每个属性的值。也就是说，如果在一个重复调用的函数中的循环体内使用了对象直接量，它将创建很多新对象，并且每次创建的对象的属性值也有可能不同；</p></li><li><p>new运算符创建并初始化一个新对象，关键字new后跟随一个函数调用，这里的函数称做构造函数，用以初始化一个新创建的对象；</p></li><li><p>Object.create(对象原型,[对对象的属性进一步描述]):创建一个新对象；是一个静态函数，不是提供给某个对象调用的方法；var o1=Object.create({x:1,y:2});//o1继承了属性x和y；可以通过传入参数null来创建一个没有原型的新对象，但通过这种方式创建的对象不会继承任何东西，甚至不包括基础方法，比如toString()；var o2=Object.create(null);//o2不继承任何属性和方法如果想创建一个普通的空对象（比如通过{}或new Object()创建的对象），需要传入Object.prototype：var o3=Object.create(Object.prototype);//o3和{}和new Object()一样；可以通过任意原型创建新对象（换句话说，可以使任意对象可继承），这是一个强大的特性；</p></li></ul></li><li><p>属性的查询和设置</p><ul><li><p>获取属性的值：点(.)或者方括号[]；可以通过点和方括号创建属性或给属性赋值；方括号内的属性必须返回字符串或者返回一个可以转换为字符串的值；</p></li><li><p>作为关联数组的对象:使用方括号和字符串，看起来很像数组的方式，只是通过字符串索引，这种数组被称为关联数组，也称为散列、映射或者字典；js对象都是关联数组；</p></li><li><p>强类型语言中，对象必须有固定数目的属性，且属性名称必须提前定义好，js是弱类型语言，不是如此；js是在任何对象中，程序都可以创建任意数量的属性；</p></li><li><p>通过点.访问属性的时候，属性名是一个标识符，不是数据类型，所以程序无法修改它们；通过[]访问的时候，属性名是字符串，字符串是js数据类型，可以创建和修改；字符串值是动态的，可以在运行时更改；标识符是静态的，必须写死在程序中；</p></li><li><p>继承：</p><p>假设查询对象o的属性x，o中不存在，则在原型对象中查询，如果原型对象中也没有，但有原型，继续向上查询，直至找到x或者查到原型是null的对象；对象的原型属性构成一个“链”，通过“链”实现属性的继承；</p><p>给对象o的属性x赋值，只改变已有属性x的值；</p><p>属性赋值首先检查原型链，判断是否允许赋值；如果o继承自一个只读属性x，不允许赋值操作；如果允许，只可以在原始对象上赋值或者创建，不会修改原型链；</p><p>属性赋值，三种情况：</p><p>创建一个属性、在原始对象中设置属性或者失败；一个例外：如果o继承自属性x，这个属性具有setter方法的accessor属性，这时调用setter方法，而不是创建一个属性x；setter是由o调用的，不是定义这个属性的原型对象调用；不会修改原型链；</p></li><li><p>属性访问错误：</p><p>查询一个不存在的属性不会报错，访问属性的时候，o及其继承的属性中都未找到，返回undefined；</p><p>如果对象不存在，查询这个对象的属性就会报错；</p><p>null和undefined值都没有属性， 查询时会报错；设置属性也会报错；</p><p>属性设置失败不会报错；</p><p>以下情况给对象o设置属性p会失败：</p><p> o中p属性时只读的；</p><p> p中属性p是继承属性，且只读；</p><p> o中不存在自有属性p；o没有使用setter方法继承属性p，且o的可扩展性是false；如果o中不存在p，而且没有setter方法可供调用，则p一定会添加至o中。但如果o不是可扩展的，那么在o中不能定义新属性；</p></li></ul></li><li><p>删除属性</p><ul><li><p>delete可以删除对象的属性，操作数是一个属性访问表达式；</p></li><li><p>只能删除自有属性，不能删除继承属性；</p></li><li><p>删除成功或没有任何副作用时，返回true；delete后不是一个属性访问表达式，返回true；</p></li><li><p>不能删除可配置性为false的属性；比如变量声明和函数声明创建的全局对象的属性；</p></li><li><p>当在非严格模式中删除全局对象的可配值属性时，可以省略对全局对象的引用，直接在delete操作符后跟随要删除的属性名即可；</p></li><li><p>然而在严格模式中，delete后跟随一个非法的操作数（比如x），则会报一个语法错误，因此必须显式指定对象及其属性</p></li></ul></li><li><p>检测属性</p><ul><li><p>三种方法：in运算符：左侧是属性名（字符串）右边是对象，如果对象的自有属性或继承属性中包含这个属性返回true；</p></li><li><p>hasOwnPreperty()：检测给定的名字是否是对象的自有属性；继承属性返回false；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o;<span class="comment">//true,x是o的属性</span></span><br><span class="line"><span class="string">"y"</span> <span class="keyword">in</span> o;<span class="comment">//false，y不是o的属性</span></span><br><span class="line"><span class="string">"toString"</span> <span class="keyword">in</span> o;<span class="comment">//true，o继承toString属性</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o.hasOwnProperty(<span class="string">"x"</span>);<span class="comment">//true,自有属性</span></span><br><span class="line"></span><br><span class="line">o.hasOwnProperty(<span class="string">"y"</span>);<span class="comment">//false，无</span></span><br><span class="line"></span><br><span class="line">o.hasOwnProperty(<span class="string">"toString"</span>);<span class="comment">//false，继承属性</span></span><br></pre></td></tr></table></figure></li><li><p>propertyIsEnumerable()：是由检测到是自有属性且这个属性和可枚举性为true时返回true，某些内置属性是不可枚举的，通常由js创建的属性都是可枚举的；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o.y=<span class="number">2</span>;</span><br><span class="line">o.propertyIsEnumerable(<span class="string">"y"</span>);<span class="comment">//true,可枚举的自有属性</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">"x"</span>);<span class="comment">//false,x是继承来的</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.propertyIsEnumerable(<span class="string">"toString"</span>);<span class="comment">//false，不可枚举</span></span><br></pre></td></tr></table></figure></li><li><p>另：使用!==判断 一个属性是否是undefined；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o.x!==<span class="literal">undefined</span>;<span class="comment">//true:o中有属性x</span></span><br><span class="line">o.y!==<span class="literal">undefined</span>;<span class="comment">//false:o中没有属性y</span></span><br><span class="line">o.toString!==<span class="literal">undefined</span>;<span class="comment">//true:o继承了toString属性</span></span><br></pre></td></tr></table></figure></li><li><p>in可以区分不存在的属性和存在但值为undefined的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">o.x!==<span class="literal">undefined</span><span class="comment">//false：属性存在，但值为undefined</span></span><br><span class="line">o.y!==<span class="literal">undefined</span><span class="comment">//false：属性不存在</span></span><br><span class="line"><span class="string">"x"</span><span class="keyword">in</span> o<span class="comment">//true：属性存在</span></span><br><span class="line"><span class="string">"y"</span><span class="keyword">in</span> o<span class="comment">//false：属性不存在</span></span><br><span class="line"><span class="keyword">delete</span> o.x;<span class="comment">//删除了属性x</span></span><br><span class="line"><span class="string">"x"</span><span class="keyword">in</span> o<span class="comment">//false：属性不再存在</span></span><br></pre></td></tr></table></figure></li><li><p> “!==”可以区分undefined和null；</p></li></ul></li><li><p>枚举属性</p><ul><li><p>遍历对象的属性：</p><pre><code>for/in循环遍历：for/i n循环可以在循环体中遍历对象中所有可枚举的属性（包括自有属性和继承的属性），把属性名称赋值给循环变量；   Object.keys()：返回一个数组，这个数组由对象中可枚举的自有属性的名称组成；   Object.getOwnPropertyNames()：返回对象的所有自有属性的名称，而不仅仅是可枚举的属性</code></pre></li><li><p>枚举属性的对象工具函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">把p中的可枚举属性复制到o中，返回o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果p和o含有同名属性，覆盖o中的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不处理getter和setter以及复制属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o,p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(prop <span class="keyword">in</span> p)&#123;<span class="comment">//遍历p中所有属性</span></span><br><span class="line"></span><br><span class="line">         o[prop]=p[prop];<span class="comment">//将属性添加至o中</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*将p中的可枚举属性复制至o中，并返回o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*如果o和p中有同名的属性，o中的属性将不受影响</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*这个函数并不处理getter和setter以及复制属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">o,p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(prop <span class="keyword">in</span> p)&#123;<span class="comment">//遍历p中的所有属性</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(o.hasOwnProperty(<span class="string">"prop"</span>)) <span class="keyword">continue</span>;<span class="comment">//过滤掉已经在o中存在的属性</span></span><br><span class="line"></span><br><span class="line">         o[prop]=p[prop];<span class="comment">//将属性添加至o中</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*如果o中的属性在p中没有同名属性，则从o中删除这个属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*返回o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restrict</span>(<span class="params">o,p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(prop <span class="keyword">in</span> p)&#123;<span class="comment">//遍历o中的所有属性</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(!(prop <span class="keyword">in</span> o)) <span class="keyword">delete</span> o[prop];<span class="comment">//遍历o中的所有属性</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*如果o中的属性在p中存在同名属性，则从o中删除这个属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*返回o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">o,p</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(prop <span class="keyword">in</span> p)&#123;<span class="comment">//遍历p中的所有属性</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">delete</span> o[prop];<span class="comment">//从o中删除（删除一个不存在的属性不会报错）</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*返回一个新对象，这个对象同时拥有o的属性和p的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*如果o和p中有重名属性，使用p中的属性值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span>(<span class="params">o,p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> extend(extend(&#123;&#125;,o),p);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*返回一个新对象，这个对象拥有同时在o和p中出现的属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*很像求o和p的交集，但p中属性的值被忽略</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">o,p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">     retrun restrict(extend(&#123;&#125;,o),p);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*返回一个数组，这个数组包含的是o中可枚举的自有属性的名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> o!==<span class="string">"object"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();<span class="comment">//参数必须是对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];<span class="comment">//将要返回的数组</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;<span class="comment">//遍历所有可枚举的属性</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span>(o.hasOwnProperty(prop))<span class="comment">//判断是否是自有属性</span></span><br><span class="line"></span><br><span class="line">             result.push(prop);<span class="comment">//将属性名添加至数组中</span></span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> result;<span class="comment">//返回这个数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性getter和setter：</p><ul><li>getter和setter定义的属性称做“存取器属性”（accessor property）；当程序查询存取器属性的值时，JavaScript调用getter方法（无参数）。这个方法的返回值就是属性存取表达式的值。当程序设置一个存取器属性的值时，JavaScript调用setter方法，将赋值表达式右侧的值当做参数传入setter；</li><li>存取器属性不具有可写性（writable attribute）；</li><li>如果属性同时具有getter和setter方法，那么它是一个读/写属性。如果它只有getter方法，那么它是一个只读属性。如果它只有setter方法，那么它是一个只写属性（数据属性中有一些例外），读取只写属性总是返回undefined；</li><li>定义存取器属性：使用对象直接量语法；</li><li>存取器属性定义为一个或两个和属性同名的函数，这个函数定义没有使用function关键字，而是使用get和（或）set；</li><li>存取器属性是可以继承的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;</span><br><span class="line"></span><br><span class="line">data_prop:value,<span class="comment">//存取器属性都是成对定义的函数</span></span><br><span class="line"></span><br><span class="line">get accessor_prop()&#123;<span class="comment">/*这里是函数体*/</span>&#125;,</span><br><span class="line"></span><br><span class="line">set accessor_prop(value)&#123;<span class="comment">/*这里是函数体*/</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>属性的特性</p><ul><li><p>除了包含名字和值之外，属性还包含一些标识它们可写、可枚举和可配置的特性；</p></li><li><p>将存取器属性的getter和setter方法看成是属性的特性；也可以把数据属性的值同样看做属性的特性；可以认为一个属性包含一个名字和4个特性。数据属性的4个特性分别是它的值（value）、可写性（writable）、可枚举性（enumerable）和可配置性（configurable）。存取器属性不具有值（value）特性和可写性，它们的可写性是由setter方法存在与否决定的。因此存取器属性的4个特性是读取（get）、写入（set）、可枚举性和可配置性；</p></li><li><p>es5定义了一个名为“属性描述符”（property descriptor）的对象，代表那4个特性；数据属性的描述符对象的属性有value、writable、enumerable和configurable。存取器属性的描述符对象则用get属性和set属性代替value和writable。其中writable、enumerable和configurable都是布尔值，get属性和set属性是函数值；</p></li><li><p>Object.getOwnPropertyDescriptor(对象，属性名)：可以获得某个对象特定属性的属性描述符；只能得到自有属性的描述符；继承属性和不存在的属性，返回undefined；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">//返回&#123;value:1,writable:true,enumerable:true,configurable:true&#125;</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(random,<span class="string">"octet"</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">//查询上文中定义的randam对象的octet属性</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//返回&#123;get:/*func*/,set:undefined,enumerable:true,configurable:true&#125;</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;,<span class="string">"x"</span>);<span class="comment">//对于继承属性和不存在的属性，返回undefined</span></span><br><span class="line">   </span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(&#123;&#125;,<span class="string">"toString"</span>);<span class="comment">//undefined，继承属性</span></span><br></pre></td></tr></table></figure></li><li><p>要想获得继承属性的特性，需要遍历原型链</p></li><li><p>Object.definePeoperty(修改的对象，要创建或修改的属性的名称，属性描述符对象)：设置属性的特性，或者想让新建属性具有某种特性，传入要修改的对象、要创建或修改的属性的名称以及属性描述符对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> o=&#123;&#125;;<span class="comment">//创建空对象</span></span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(o,<span class="string">"x"</span>,</span><br><span class="line">     &#123;</span><br><span class="line">         value:<span class="number">1</span>,</span><br><span class="line">         writable:<span class="literal">true</span>,</span><br><span class="line">         enumerable:<span class="literal">false</span>,</span><br><span class="line">         configurable:<span class="literal">true</span></span><br><span class="line">     &#125;);<span class="comment">//添加一个不可枚举的数据属性x，并赋值为1</span></span><br><span class="line">o.x;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o);<span class="comment">//[],没有可枚举属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o,<span class="string">"x"</span>,&#123;<span class="attr">writable</span>:<span class="literal">false</span>&#125;);<span class="comment">//将x变为只读</span></span><br><span class="line">o.x=<span class="number">2</span>;<span class="comment">//更改属性的值，失败，不报错，严格模式抛出类型错误异常</span></span><br><span class="line">o.x;<span class="comment">//1</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o,<span class="string">"x"</span>,&#123;<span class="attr">value</span>:<span class="number">2</span>&#125;);<span class="comment">//属性是可配置的，可以通过这种方式进行修改；</span></span><br><span class="line">o.x<span class="comment">//2</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o,<span class="string">"x"</span>,&#123;<span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;&#125;);<span class="comment">//将x从数据属性修改为存取其属性</span></span><br><span class="line">o.x<span class="comment">//0</span></span><br></pre></td></tr></table></figure></li><li><p>传入属性描述符时，对于新创建的属性，默认的特性值是false或者undefined；对于修改的已有属性来说，默认的特性值没有做任何修改；不能修改继承属性</p></li><li><p>Object.defineProperties()：同时修改或创建多个属性，第一个参数是要修改的对象，第二个参数是一个映射表，它包含要新建或修改的属性的名称，以及它们的属性描述符；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x:&#123;<span class="attr">value</span>:<span class="number">1</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">y:&#123;<span class="attr">value</span>:<span class="number">1</span>,<span class="attr">writable</span>:<span class="literal">true</span>,<span class="attr">enumerable</span>:<span class="literal">true</span>,<span class="attr">configurable</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">r:&#123;</span><br><span class="line">get:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x+<span class="keyword">this</span>.y*<span class="keyword">this</span>.y)&#125;,</span><br><span class="line">enumerable:<span class="literal">true</span>,</span><br><span class="line">configurable:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>对于那些不允许创建或修改的属性来说，如果用Object.defineProperty()和Object.defineProperties()对其操作（新建或修改）就会抛出类型错误异常，规则：<br>如果对象是不可扩展的，则可以编辑已有的自有属性，但不能给它添加新属性。<br>如果属性是不可配置的，则不能修改它的可配置性和可枚举性。<br>如果存取器属性是不可配置的，则不能修改其getter和setter方法，也不能将它转换为数据属性。<br>如果数据属性是不可配置的，则不能将它转换为存取器属性。<br>如果数据属性是不可配置的，则不能将它的可写性从false修改为true，但可以从true修改为false。<br>如果数据属性是不可配置且不可写的，则不能修改它的值。然而可配置但不可写属性的值是可以修改的（实际上是先将它标记为可写的，然后修改它的值，最后转换为不可写的）</p></li></ul></li><li><p>对象的三个属性</p><ul><li><p>每个对象都有三个与之相关的属性：原型、类、可扩展性；</p></li><li><p>原型属性：对象的原型属性用来继承属性；原型属性在创建实例对象之初就设置好的；通过对象直接量创建的对象使用Object.prototype作为它们的原型。通过new创建的对象使用构造函数的prototype属性作为它们的原型。通过Object.create()创建的对象使用第一个参数（也可以是null）作为它们的原型；</p></li><li><p>在es5中，将对象作为参数传入Object.getPrototypeOf()可以查询它的原型；</p></li><li><p>通过new表达式创建的对象，通常继承一个constructor属性，这个属性指代创建这个对象的构造函数；</p></li><li><p>通过对象直接量或Object.create()创建的对象包含一个名为constructor的属性，这个属性指代Object()构造函数。因此，constructor.prototype才是对象直接量的真正的原型，但对于通过Object.create()创建的对象则往往不是这样；</p></li><li><p>isPrototypeOf()方法：检测一个对象是否是另一个对象的原型（或处于原型链中）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过p.isPrototypeOf(o)来检测p是否是o的原型</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> p = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;<span class="comment">//定义一个原型对象</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> o = inherit(p);<span class="comment">//使用这个原型创建一个对象</span></span><br><span class="line"></span><br><span class="line"> p.isPrototypeOf(o);<span class="comment">//true:o继承自p</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.prototype.isPrototypeOf(o);<span class="comment">//true，p继承自Object.prototype</span></span><br></pre></td></tr></table></figure></li><li><p>类属性：是一个字符串；表示对象的类型信息；继承字Object.prototype的toString方法返回[object class]格式的字符串；想获得对象的类，调用对象的toString方法；提取已返回字符串的第八个到倒数第二个字符；问题是很多对象继承的toString（）方法重写了</p></li></ul></li><li><p>序列化对象</p></li><li><p>对象方法</p></li></ol><h2 id="第五章、数组"><a href="#第五章、数组" class="headerlink" title="第五章、数组"></a>第五章、数组</h2><ol><li><p>创建数组</p></li><li><p>数组元素的读和写</p></li><li><p>稀疏数组</p></li><li><p>数组长度</p></li><li><p>数组元素的添加和删除</p></li><li><p>数组遍历</p><ul><li><p>for循环+Object.keys();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> keys=<span class="built_in">Object</span>.key(o);<span class="comment">//获得o对象属性名组成的数组</span></span><br><span class="line"><span class="keyword">var</span> values=[]<span class="comment">//在数组中存储匹配属性的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;keys.length,i++)&#123;<span class="comment">//对于数组中每个索引</span></span><br><span class="line"><span class="keyword">var</span> key=keys[i];<span class="comment">//获得索引处的键值</span></span><br><span class="line">values[i]=o[key];<span class="comment">//在values数组中保存属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=keys.length;i&lt;len;i++)&#123;&#125;<span class="comment">//优化</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[i])<span class="keyword">continue</span>;<span class="comment">//跳过null、undefined、不存在的元素</span></span><br><span class="line"><span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i＜a.length;i++)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]===<span class="literal">undefined</span>)<span class="keyword">continue</span>;<span class="comment">//跳过undefined+不存在的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环体</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ```javascript</span><br><span class="line">for(var i=0;i＜a.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">if(!(i in a))continue;//跳过不存在的元素</span><br><span class="line"></span><br><span class="line">//循环体</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用for/in循环处理稀疏数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span> sparseArray)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value=sparseArray[index];<span class="comment">//此处可以使用索引和值做一些事情</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!a.hasOwnProperty(i))<span class="keyword">continue</span>;<span class="comment">//跳过继承的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环体</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> a)&#123;<span class="comment">//跳过不是非负整数的i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">String</span>(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.abs(<span class="built_in">Number</span>(i))))!==i)<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多维数组</p><p>访问数组的数组中的元素，只要简单地使用两次[]操作符即可；</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> table=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;table.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">     table[i]=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> row=<span class="number">0</span>;row&lt;table.length;row++)&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> col=<span class="number">0</span>;col&lt;table[row].length;col++)&#123;</span><br><span class="line"></span><br><span class="line">         table[row][col]=row*col;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组方法</p><ul><li><p>join(“可选字符串”):将数组中所有元素都转化为字符串并连接在一起，返回最后生成的字符串；可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素；</p></li><li><p>reverse()：将数组中的元素颠倒顺序，返回逆序的数组</p></li><li><p>sort()：将数组中的元素排序并返回排序后的数组；如果数组包含undefined元素，它们会被排到数组的尾部；按照其他方式而非字母表顺序进行数组排序，必须给sort()方法传递一个比较函数；该函数决定了它的两个参数在排好序的数组中的先后顺序；假设第一个参数应该在前，比较函数应该返回一个小于0的数值。反之，假设第一个参数应该在后，函数应该返回一个大于0的数值。并且，假设两个值相等（也就是说，它们的顺序无关紧要），函数应该返回0</p></li><li><p>concat()：创建并返回一个新数组。它的元素包括调用concat()的原始数组的元素和concat()的每个参数；如果这些参数中的任何一个自身是数组，则连接的是数组的元素，而非数组本身；concat()不会递归扁平化数组的数组。concat()也不会修改调用的数组</p></li><li><p>slice()：返回指定数组的一个片段或子数组，它的两个参数分别指定了片段的开始和结束的位置，返回的数组包含第一个参数指定的位置和所有到但不含第二个参数指定的位置之间的所有数组元素；如参数中出现负数，它表示相对于数组中最后一个元素的位置；</p></li><li><p>splice()：在数组中插入或删除元素的通用方法，splice()会修改调用的数组；splice()能够从数组中删除元素、插入元素到数组中或者同时完成这两种操作；splice()的第一个参数指定了插入和（或）删除的起始位置；第二个参数指定了应该从数组中删除的元素的个数；如果省略第二个参数，从起始点开始到数组结尾的所有元素都将被删除；splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组；紧随其后的任意个数的参数指定了需要插入到数组中的元素，从第一个参数指定的位置开始插入；splice()会插入数组本身而非数组的元素</p></li><li><p>push()和pop()：允许将数组当做栈来使用。push()方法在数组的尾部添加一个或多个元素，并返回数组新的长度。pop()方法则相反：它删除数组的最后一个元素，减小数组长度并返回它删除的值；两个方法都修改并替换原始数组而非生成一个修改版的新数组</p></li><li><p>unshift()和shift()：unshift()在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度。shift()删除数组的第一个元素并将其返回，然后把所有随后的元素下移一个位置来填补数组头部的空缺；参数是一次性插入的</p></li><li><p>toString()：将其每个元素转化为字符串和toLocaleString()：将每个数组元素转化为字符串，并且使用本地化（和自定义实现的）分隔符将这些字符串连接起来生成最终的字符串</p></li></ul></li><li><p>es5中的数组方法</p><ul><li><p>forEach()：从头至尾遍历数组，为每个元素调用指定的函数；forEach()使用三个参数调用该函数：数组元素、元素的索引和数组本身；无法在所有元素都传递给调用的函数之前终止遍历；</p></li><li><p>map()：将调用的数组的每个元素传递给指定的函数，并返回一个数组，它包含该函数的返回值；map()返回的是新数组：它不修改调用的数组；</p></li><li><p>filter()：返回的数组元素是调用的数组的一个子集；传递的函数是用来逻辑判定的：该函数返回true或false；调用判定函数就像调用forEach()和map()一样；如果返回值为true或能转化为true的值，那么传递给判定函数的元素就是这个子集的成员，它将被添加到一个作为返回值的数组中；filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的；</p></li><li><p>every()和some()：数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或false；every():就像数学中的“针对所有”的量词：当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true;</p></li><li><p>some():就像数学中的“存在”的量词：当数组中至少有一个元素调用判定函数返回true，它就返回true；并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false;</p></li><li><p>reduce()和reduceRight():使用指定的函数将数组元素进行组合，生成单个值;也可以称为“注入”和“折叠”；</p></li><li><p>reduce():reduce()需要两个参数。第一个是执行化简操作的函数。化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值；第二个（可选）的参数是一个传递给函数的初始值；reduce()使用的函数与forEach()和map()使用的函数不同；数组元素、元素的索引和数组本身将作为第2～4个参数传递给函数；第一个参数是到目前为止的化简操作累积的结果。第一次调用函数时，第一个参数是一个初始值，它就是传递给reduce()的第二个参数；在接下来的调用中，这个值就是上一次化简函数的返回值；当不指定初始值调用reduce()时，它将使用数组的第一个元素作为其初始值；在空数组上，不带初始值参数调用reduce()将导致类型错误异常；</p></li><li><p>reduceRight()的工作原理和reduce()一样，不同的是它按照数组索引从高到低（从右到左）处理数组，而不是从低到高；</p></li><li><p>indexOf()和lastIndexOf()：搜索整个数组中具有给定值的元素，返回找到的第一个元素的索引或者如果没有找到就返回-1。indexOf()从头至尾搜索，而lastIndexOf()则反向搜索；不接收一个函数作为其参数；第一个参数是需要搜索的值，第二个参数是可选的：它指定数组中的一个索引，从那里开始搜索。如果省略该参数，indexOf()从头开始搜索，而lastIndexOf()从末尾开始搜索。第二个参数也可以是负数，它代表相对数组末尾的偏移量</p></li></ul></li><li><p>数组类型</p><ul><li>判断数组类型：Array.isArray([]);//true</li></ul></li><li><p>类数组对象</p><ul><li><p>数组特性:当有新的元素添加时，自动更新列表；设置length为一个较小值将截断数组；从Array.prototype继承一些方法；类属性为“Array”;</p></li><li><p>把拥有一个数值length属性和对应非负整数属性的对象看做一种类型的数组;</p></li><li><p>Arguments对象就是一个类数组对象</p></li><li><p>一些DOM方法（如document.getElementsByTagName()）也返回类数组对象;</p></li></ul></li><li><p>作为数组的字符串</p><ul><li><p>字符串的行为类似于只读的数组。除了用charAt()方法来访问单个的字符以外，还可以使用方括号；</p></li><li><p>针对字符串的typeof操作符仍然返回”string”；</p></li></ul></li></ol><h2 id="第六章、函数"><a href="#第六章、函数" class="headerlink" title="第六章、函数"></a>第六章、函数</h2><blockquote><p>只定义一次，可调用多次；</p><p>定义会包括一个称为形参的标识符列表，这些参数在函数体中像局部变量一样工作；</p><p>函数调用会为形参提供实参的值；</p><p>除了实参之外，每次调用还会拥有另一个值——本次调用的上下文——就是this关键字的值；</p><p>如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。当通过这个对象来调用函数时，该对象就是此次调用的上下文，也就是该函数的this的值；</p><p>用于初始化一个新创建的对象的函数称为构造函数；</p><p>在js中，函数即对象；</p></blockquote><ol><li><p>函数定义</p><ul><li><p>使用function关键字定义，可以用在函数定义表达式或者函数声明语句；</p></li><li><p>function 后跟:</p></li><li><p>函数名称标识符：函数声明语句必需的部分；函数定义表达式可选的；</p></li><li><p>一对圆括号：其中包含由0个或者多个用逗号隔开的标识符组成的列表，这些标识符是函数的参数名称，它们就像函数体中的局部变量一样；</p></li><li><p>一对花括号，其中包含0条或多条JavaScript语句。这些语句构成了函数体：一旦调用函数，就会执行这些语句；</p></li><li><p>如果return语句没有一个与之相关的表达式，则返回undefined，如果一个函数不包含return语句，那它就只执行函数体中的每条语句，并返回undefined值给调用者；</p></li><li><p>嵌套函数：可以访问嵌套它们（或多重嵌套）的函数的参数和变量</p></li></ul></li><li><p>函数调用</p><ul><li><p>定义时不执行，调用时执行，调用的情况：作为函数、作为方法、作为构造函数、通过它们的call()和apply()方法间接调用；</p></li><li><p>函数调用：一个调用表达式由多个函数表达式组成，每个函数表达式都是由一个函数对象和左圆括号、参数列表和右圆括号组成，参数列表是由逗号分隔的零个或多个参数表达式组成；</p></li><li><p>调用上下文（this的值）是全局对象；在严格模式下，调用上下文则是undefined；</p></li><li><p>“this”可以用来判断当前是否是严格模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义并调用一个函数来确定当前脚本运行时是否为严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strict=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span>!<span class="keyword">this</span>;&#125;());</span><br></pre></td></tr></table></figure></li><li><p>方法调用：如果函数表达式是一个属性访问表达式，即该函数是一个对象的属性或数组中的一个元素，那么它就是一个方法调用表达式；</p></li><li><p>对方法调用的参数和返回值的处理，和上面所描述的普通函数调用完全一致。但是，方法调用和函数调用有一个重要的区别，即：调用上下文；</p></li><li><p>属性访问表达式由两部分组成：一个对象和属性名称；在方法调用表达式里，函数体可以使用关键字this引用该对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculator=&#123;<span class="comment">//对象直接量</span></span><br><span class="line"></span><br><span class="line">operand1:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">operand2:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//注意this关键字的用法，this指代当前对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.result=<span class="keyword">this</span>.operand1+<span class="keyword">this</span>.operand2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">calculator.add();<span class="comment">//这个方法调用计算1+1的结果</span></span><br><span class="line"></span><br><span class="line">calculator.result<span class="comment">//=＞2</span></span><br></pre></td></tr></table></figure></li><li><p>方法链：“链式调用”</p></li><li><p>this是一个关键字，不是变量，也不是属性名。JavaScript的语法不允许给this赋值；</p></li><li><p>和变量不同，关键字this没有作用域的限制，嵌套的函数不会从调用它的函数中继承this。如果嵌套函数作为方法调用，其this的值指向调用它的对象。如果嵌套函数作为函数调用，其this值不是全局对象（非严格模式下）就是undefined（严格模式下）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o=&#123;<span class="comment">//对象o</span></span><br><span class="line"></span><br><span class="line">m:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//对象中的方法m()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> self=<span class="keyword">this</span>;<span class="comment">//将this的值保存至一个变量中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>===o);<span class="comment">//输出true，this就是这个对象o</span></span><br><span class="line"></span><br><span class="line">f();<span class="comment">//调用辅助函数f()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定义一个嵌套函数f()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>===o);<span class="comment">//"false":this的值是全局对象或undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(self===o);<span class="comment">//"true":self指外部函数的this值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">o.m();<span class="comment">//调用对象o的方法m()</span></span><br></pre></td></tr></table></figure></li><li><p>构造函数调用：如果函数或者方法调用之前带有关键字new，它就构成构造函数调用；</p></li><li><p>构造函数调用和普通的函数调用以及方法调用在实参处理、调用上下文和返回值方面都有不同；</p></li><li><p>如果构造函数调用在圆括号内包含一组实参列表，先计算这些实参表达式，然后传入函数内，这和函数调用和方法调用是一致的。但如果构造函数没有形参，JavaScript构造函数调用的语法是允许省略实参列表和圆括号的；凡是没有形参的构造函数调用都可以省略圆括号；</p></li><li><p>构造函数调用创建一个新的空对象，这个对象继承自构造函数的prototype属性。构造函数试图初始化这个新创建的对象，并将这个对象用做其调用上下文，因此构造函数可以使用this关键字来引用这个新创建的对象；</p></li><li><p>构造函数通常不使用return关键字，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。然而如果构造函数显式地使用return语句返回一个对象，那么调用表达式的值就是这个对象。如果构造函数使用return语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果；</p></li><li><p>间接调用：JavaScript中的函数也是对象，和其他JavaScript对象没什么两样，函数对象也可以包含方法。其中的两个方法call()和apply()可以用来间接地调用函数；</p></li><li><p>两个方法都允许显式指定调用所需的this值，也就是说，任何函数可以作为任何对象的方法来调用，哪怕这个函数不是那个对象的方法；两个方法都可以指定调用的实参。ca ll()方法使用它自有的实参列表作为函数的实参，apply()方法则要求以数组的形式传入参数；</p></li></ul></li><li><p>函数的实参和形参</p><ul><li><p>可选形参：当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为undefined值；应当给省略的参数赋一个合理的默认值；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将对象o中可枚举的属性名追加至数组a中，并返回这个数组a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果省略a，则创建一个新数组并返回这个新数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropertyNames</span>(<span class="params">o,<span class="regexp">/*optional*/</span>a</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a===<span class="literal">undefined</span>)a=[];<span class="comment">//如果未定义，则使用新数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> property <span class="keyword">in</span> o)a.push(property);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个函数调用可以传入1个或2个实参</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=getPropertyNames(o);<span class="comment">//将o的属性存储到一个新数组中</span></span><br><span class="line"></span><br><span class="line">getPropertyNames(p,a);<span class="comment">//将p的属性追加至数组a中</span></span><br></pre></td></tr></table></figure></li><li><p>可变长的实参列表：实参对象<br> 当调用函数的时候传入的实参个数超过函数定义时的形参个数时，没有办法直接获得未命名值的引用；参数对象解决了这个问题；在函数体内，标识符arguments是指向实参对象的引用，实参对象是一个类数组对象；这样可以通过数字下标就能访问传入函数的实参值，而不用非要通过名字来得到实参；</p><pre><code>  省略的实参都将是undefined，多出的参数会自动省略 实参对象有一个重要的用处，就是让函数可以操作任意数量的实参可以接收任意个数的实参，这种函数也称为“不定实参函数”（varargs function）；不定实参函数的实参个数不能为零；arguments[]对象最适合的应用场景是在这样一类函数中，这类函数包含固定个数的命名和必需参数，以及随后个数不定的可选实参；  arguments并不是真正的数组，它是一个实参对象；每个实参对象都包含以数字为索引的一组元素以及length属性；  callee属性：arguments.callee();指代当前正在执行的函数；  caller属性：指代调用当前正在执行的函数的函数；  严格模式中的函数无法使用arguments作为形参名或局部变量名，也不能给arguments赋值；</code></pre></li><li><p>将对象属性用作实参：</p><p>  ​    为了免于调用函数中实参的正确顺序，通过名/值对的形式传入参数，定义函数时，传入的实参都写入一个单独的对象；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//将原始数组的length元素复制至目标数组</span><br><span class="line"></span><br><span class="line">//开始复制原始数组的from_start元素</span><br><span class="line"></span><br><span class="line">//并且将其复制至目标数组的to_start中</span><br><span class="line"></span><br><span class="line">//要记住实参的顺序并不容易</span><br><span class="line"></span><br><span class="line">function arraycopy(/*array*/from,/*index*/from_start,/*array*/to,/*index*/to_start,</span><br><span class="line"></span><br><span class="line">/*integer*/length)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">//逻辑代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这个版本的实现效率稍微有些低，但你不必再去记住实参的顺序</span><br><span class="line"></span><br><span class="line">//并且from_start和to_start都默认为0</span><br><span class="line"></span><br><span class="line">function easycopy(args)&#123;</span><br><span class="line"></span><br><span class="line">arraycopy(args.from,</span><br><span class="line"></span><br><span class="line">args.from_start||0,//注意这里设置了默认值</span><br><span class="line"></span><br><span class="line">args.to,</span><br><span class="line"></span><br><span class="line">args.to_start||0,args.length);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//来看如何调用easycopy()</span><br><span class="line"></span><br><span class="line">var a=[1,2,3,4],b=[];</span><br><span class="line"></span><br><span class="line">easycopy(&#123;from:a,to:b,length:4&#125;);</span><br></pre></td></tr></table></figure></li><li><p>实参类型：实参类型检查逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   //返回数组（或类数组对象）a的元素的累加和</span><br><span class="line"></span><br><span class="line">//数组a中必须为数字、null和undefined的元素都将忽略</span><br><span class="line"></span><br><span class="line">function sum(a)&#123;</span><br><span class="line"></span><br><span class="line">if(isArrayLike(a))&#123;</span><br><span class="line"></span><br><span class="line">var total=0;</span><br><span class="line"></span><br><span class="line">for(var i=0;i＜a.length;i++)&#123;//遍历所有元素</span><br><span class="line"></span><br><span class="line">var element=a[i];</span><br><span class="line"></span><br><span class="line">if(element==null)continue;//跳过null和undefined</span><br><span class="line"></span><br><span class="line">if(isFinite(element))total+=element;</span><br><span class="line"></span><br><span class="line">else throw new Error(&quot;sum():elements must be finite numbers&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return total;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else throw new Error(&quot;sum():argument must be array-like&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实参类型和实参个数的不确定性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">function flexisum(a)&#123;</span><br><span class="line"></span><br><span class="line">var total=0;</span><br><span class="line"></span><br><span class="line">for(var i=0;i＜arguments.length;i++)&#123;</span><br><span class="line"></span><br><span class="line">var element=arguments[i],n;</span><br><span class="line"></span><br><span class="line">if(element==null)continue;//忽略null和undefined实参</span><br><span class="line"></span><br><span class="line">if(isArray(element))//如果实参是数组</span><br><span class="line"></span><br><span class="line">n=flexisum.apply(this,element);//递归地计算累加和</span><br><span class="line"></span><br><span class="line">else if(typeof element===&quot;function&quot;)//否则，如果是函数...</span><br><span class="line"></span><br><span class="line">n=Number(element());//调用它并做类型转换</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">n=Number(element);//否则直接做类型转换</span><br><span class="line"></span><br><span class="line">if(isNaN(n))//如果无法转换为数字，则抛出异常</span><br><span class="line"></span><br><span class="line">throw Error(&quot;flexisum():can&apos;t convert&quot;+element+&quot;to number&quot;);</span><br><span class="line"></span><br><span class="line">total+=n;//否则，将n累加至total</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return total;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>作为值的函数</p></li><li><p>作为命名空间的函数</p></li><li><p>闭包</p></li><li><p>函数属性 方法和构造函数</p></li><li><p>函数式编程</p></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/01/09/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>html&amp;css</title>
      <link>http://yoursite.com/2019/01/07/Head%20First%20HTML%E4%B8%8ECSS/</link>
      <guid>http://yoursite.com/2019/01/07/Head%20First%20HTML%E4%B8%8ECSS/</guid>
      <pubDate>Mon, 07 Jan 2019 06:58:50 GMT</pubDate>
      <description>
      
        &lt;h4 id=&quot;html文档结构&quot;&gt;&lt;a href=&quot;#html文档结构&quot; class=&quot;headerlink&quot; title=&quot;html文档结构&quot;&gt;&lt;/a&gt;html文档结构&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;//声明是html5文档&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;//字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tltle&lt;/span&gt;&amp;gt;&lt;/span&gt;文档名&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tltle&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url路径&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;//外部链入css样式表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        文档内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url/#id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;tltle&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;鼠标悬停显示详细内容&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;链接/跳转锚点&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;图片加载失败显示文本&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;//JPEG、PNG、GIF；不建议直接给img设置宽高，因为虽然用width和height设置了宽高，浏览器打开时仍然会下载原图像，消耗性能；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="html文档结构"><a href="#html文档结构" class="headerlink" title="html文档结构"></a>html文档结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>//声明是html5文档</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span>//字符集</span><br><span class="line">        <span class="tag">&lt;<span class="name">tltle</span>&gt;</span>文档名<span class="tag">&lt;/<span class="name">tltle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"url路径"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>//外部链入css样式表</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        文档内容</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"url/#id"</span> <span class="attr">tltle</span>=<span class="string">"鼠标悬停显示详细内容"</span>&gt;</span>链接/跳转锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"url"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败显示文本"</span>/&gt;</span>//JPEG、PNG、GIF；不建议直接给img设置宽高，因为虽然用width和height设置了宽高，浏览器打开时仍然会下载原图像，消耗性能；</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><ol><li><p>块级：h1~h6    p blockquote li ul ol div table tr th td dl dt dd header footer aside section article nav video audio </p></li><li><p>行级：a img q em span strong b i input label </p></li></ol><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ol><li><p>系统设置：<code>font-family：字体类型，，，sans-serif；</code></p></li><li><p>web开放字体：<code>@font-face{font-family:;src:url(&quot;&quot;);}</code></p><p>font-family:候选字体列表、同一个字体系列，最后则放置一个通用字体系列名//字体优先列表</p><p>.ttf .otf .eot .woff .svg</p></li><li><p>font:font-style font-variant font-weight font-size/line-height font-family;前三项可选，且不固定顺序，但必须在font-size之前；</p></li><li><p>line-height:1;设置行高为元素自己字体大小的1倍；</p></li><li><p>大多数body默认字体16px；h1默认200%，h2是150%，h3是120%，h4是100%，h5是90%，h6是60%</p></li><li><p>设置body为固定字体，如font-size:small;再进行其他设置的时候，相对设置；</p></li><li><p>字体：sans-serif、serif、monospace、cursive、fantasy</p></li></ol><h4 id="web颜色"><a href="#web颜色" class="headerlink" title="web颜色"></a>web颜色</h4><ol><li><p>rgb(%/0-255,,);rgba(,,,);</p></li><li><p>#十六进制</p></li><li><p>white、black 等关键字；</p></li></ol><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>@media</p><p>适应不同设备和 浏览器尺寸</p><p>max-device-width:设备最大宽度和max-width:浏览器最大宽度；</p><h4 id="链接样式"><a href="#链接样式" class="headerlink" title="链接样式"></a>链接样式</h4><p>伪类： :link  :visited  :hover  :focus  :active</p><h4 id="元素选择"><a href="#元素选择" class="headerlink" title="元素选择"></a>元素选择</h4><ol><li>h1{}</li><li>.class{}</li><li>#id{}</li><li>a:visited{}</li><li>body,html{}</li><li>div p{}</li><li>div&gt;p{}</li><li>p:first-child{}</li><li>p:last-child{}</li><li>p:nth-child(even/2n){}</li><li>p:nth=child(odd/2n+1){}</li></ol><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>相对路径和绝对路径</p><p>span:针对内联样式进行逻辑分组</p><p>div：将页面划分为逻辑区或逻辑分组</p><p>想要对多个元素使用某个样式时，用class，如果只有一个元素需要添加样式，使用id</p><p>background-image:url(无双引号);</p><p>background-repeat:no-repeat、repeat-x、repeat-y、inherit</p><p>background-position：px、%、关键字</p><p>css继承，有些属性可继承，有些则不可；若不想继承，则在子元素重新设置覆盖继承；</p><p><img src="http://pjx6k98jg.bkt.clouddn.com/HTML.png" alt=""></p>]]></content:encoded>
      
      <comments>http://yoursite.com/2019/01/07/Head%20First%20HTML%E4%B8%8ECSS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>素描</title>
      <link>http://yoursite.com/2018/12/26/%E7%B4%A0%E6%8F%8F/</link>
      <guid>http://yoursite.com/2018/12/26/%E7%B4%A0%E6%8F%8F/</guid>
      <pubDate>Wed, 26 Dec 2018 10:11:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;静物&quot;&gt;&lt;a href=&quot;#静物&quot; class=&quot;headerlink&quot; title=&quot;静物&quot;&gt;&lt;/a&gt;静物&lt;/h2&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="静物"><a href="#静物" class="headerlink" title="静物"></a>静物</h2><a id="more"></a><p><img src="https://i.loli.net/2019/03/05/5c7e420932673.jpg" alt="静物"></p><h2 id="静物-石膏"><a href="#静物-石膏" class="headerlink" title="静物+石膏"></a>静物+石膏</h2><p><img src="https://i.loli.net/2019/03/05/5c7e41be0fa7d.jpg" alt="石膏+静物"></p><h2 id="多面体"><a href="#多面体" class="headerlink" title="多面体"></a>多面体</h2><p><img src="https://i.loli.net/2019/03/05/5c7e41282f265.jpg" alt="多面体"></p><h2 id="穿插体"><a href="#穿插体" class="headerlink" title="穿插体"></a>穿插体</h2><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181226180735.jpg" alt=""></p><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181226180805.jpg" alt=""></p><h2 id="圆锥"><a href="#圆锥" class="headerlink" title="圆锥"></a>圆锥</h2><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181226180902.jpg" alt=""></p><h2 id="六棱锥"><a href="#六棱锥" class="headerlink" title="六棱锥"></a>六棱锥</h2><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181226180954.jpg" alt=""></p><h2 id="长方体"><a href="#长方体" class="headerlink" title="长方体"></a>长方体</h2><p><img src="http://pjx6k98jg.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20181226180958.jpg" alt=""></p><hr><p>未完待续……</p>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/26/%E7%B4%A0%E6%8F%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>nginx是什么</title>
      <link>http://yoursite.com/2018/12/19/nginx%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <guid>http://yoursite.com/2018/12/19/nginx%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <pubDate>Wed, 19 Dec 2018 09:00:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天在菜鸟教程上面学习react的时候，了解到腾讯云开发者平台，然后按照教程准备使用Cloud Studio，在配置环境的时候，看到一句代码里面用到nginx，然后就很好奇nginx是什么？&lt;/p&gt;
&lt;h2 id=&quot;一、-nginx&quot;&gt;&lt;a href=&quot;#一、-nginx&quot; class=&quot;headerlink&quot; title=&quot;一、 nginx&quot;&gt;&lt;/a&gt;一、 nginx&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;异步框架的 Web服务器，也可以用作反向代理，负载平衡器 和 HTTP缓存；&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在菜鸟教程上面学习react的时候，了解到腾讯云开发者平台，然后按照教程准备使用Cloud Studio，在配置环境的时候，看到一句代码里面用到nginx，然后就很好奇nginx是什么？</p><h2 id="一、-nginx"><a href="#一、-nginx" class="headerlink" title="一、 nginx"></a>一、 nginx</h2><blockquote><p>异步框架的 Web服务器，也可以用作反向代理，负载平衡器 和 HTTP缓存；</p></blockquote><a id="more"></a><p>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，Nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑从而削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，Nginx使用epoll事件模型，得益于此，Nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。</p><hr><p>那么随即衍生出来的问题，什么是Web服务器，反向代理？</p><h2 id="二、Web服务器"><a href="#二、Web服务器" class="headerlink" title="二、Web服务器"></a>二、Web服务器</h2><blockquote><p>网页服务器（Web server）一词有两个意思：<br>一台负责提供网页的计算机，主要是各种编程语言构建而成，透过HTTP协议传给客户端（一般是指网页浏览器）。<br>一个提供网页的服务器程序。</p></blockquote><p>​    每一台网页服务器（第1个意思）会运行最少一个网页服务器程序（第2个意思）。作为第1个意思，大陆地区称为网站服务器。此外，也通称作Web服务器。</p><p>​    每一个网页服务器程序都需要从网络接受HTTP请求，然后提供HTTP回复给请求者。HTTP回复一般包含一个HTML文件，有时也可以包含纯文本文件、图像或其他类型的文件。一般来说这些文件都存储在网页服务器的本地文件系统里，而URL和本地档名都有一个阶级组织结构的，服务器会简单的把URL对照到本地文件系统中。当正确安装和设置好网页服务器软件，服务器管理员会从服务器软件放置文件的地方指定一个本地路径名为根目录。</p><h2 id="三、代理服务器"><a href="#三、代理服务器" class="headerlink" title="三、代理服务器"></a>三、代理服务器</h2><blockquote><p>proxy，网络代理， 允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接</p></blockquote><p>一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。</p><p>一个完整的代理请求过程为：客户端首先与代理服务器创建连接，接着根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或者获得目标服务器的指定资源（如：文件）。在后一种情况中，代理服务器可能对目标服务器的资源下载至本地缓存，如果客户端所要获取的资源在代理服务器的缓存之中，则代理服务器并不会向目标服务器发送请求，而是直接传回已缓存的资源。一些代理协议允许代理服务器改变客户端的原始请求、目标服务器的原始响应，以满足代理协议的需要。代理服务器的选项和设置在计算机程序中，通常包括一个“防火墙”，允许用户输入代理地址，它会遮盖他们的网络活动，可以允许绕过互联网过滤实现网络访问。代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求URI，会直接发送给前方持有资源的目标服务器。</p><p>持有资源实体的服务器被称为源服务器。从源服务器返回的响应经过代理服务器后再传给客户端。</p><h2 id="四、反向代理"><a href="#四、反向代理" class="headerlink" title="四、反向代理"></a>四、反向代理</h2><blockquote><p>反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器（如Web服务器）的工作量。</p></blockquote><p>服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在。</p><p>与前向代理不同，前向代理作为客户端的代理，将从互联网上获取的资源返回给一个或多个的客户端，服务端（如Web服务器）只知道代理的IP地址而不知道客户端的IP地址；而反向代理是作为服务器端（如Web服务器）的代理使用，而不是客户端。客户端借由前向代理可以间接访问很多不同互联网服务器（簇）的资源，而反向代理是供很多客户端都通过它间接访问不同后端服务器上的资源，而不需要知道这些后端服务器的存在，而以为所有资源都来自于这个反向代理服务器。</p><ul><li>对客户端隐藏服务器（簇）的IP地址</li><li>安全：作为应用层防火墙，为网站提供对基于Web的攻击行为（例[DoS/DDoS）的防护，更容易排查恶意软件等</li><li>为后端服务器（簇）统一提供加密和SSL加速（如SSL终端代理）</li><li>负载均衡，若服务器簇中有负荷较高者，反向代理通过URL重写，根据连线请求从负荷较低者获取与所需相同的资源或备援</li><li>对于静态内容及短时间内有大量访问请求的动态内容提供缓存服务</li><li>对一些内容进行压缩，以节约带宽或为网络带宽不佳的网络提供服务</li><li>减速上传</li><li>为在私有网络下（如局域网）的服务器簇提供NAT穿透及外网发布服务</li><li>提供HTTP访问认证</li><li>突破互联网封锁（不常用，因为反向代理与客户端之间的连线不一定是加密连线，非加密连线仍有遭内容审查进而遭封禁的风险；此外面对针对域名的关键字过滤、DNS缓存污染/投毒攻击乃至深度数据包检测也无能为力）</li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/19/nginx%E6%98%AF%E4%BB%80%E4%B9%88/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git&amp;&amp;github</title>
      <link>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/</link>
      <guid>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/</guid>
      <pubDate>Tue, 18 Dec 2018 02:24:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、git简介&quot;&gt;&lt;a href=&quot;#一、git简介&quot; class=&quot;headerlink&quot; title=&quot;一、git简介&quot;&gt;&lt;/a&gt;一、git简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Git：分布式版本控制系统&lt;/li&gt;
&lt;li&gt;安装（Windows）：[&lt;a href=&quot;https://git-scm.com/downloads]{.underline}&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/downloads]{.underline}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config：打开git-cmd：输入git config –global user.name ‘Your Name’&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;git config –global user.email ‘email\@example.com’;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、git简介"><a href="#一、git简介" class="headerlink" title="一、git简介"></a>一、git简介</h2><ol><li>Git：分布式版本控制系统</li><li>安装（Windows）：[<a href="https://git-scm.com/downloads]{.underline}" target="_blank" rel="noopener">https://git-scm.com/downloads]{.underline}</a></li><li>Config：打开git-cmd：输入git config –global user.name ‘Your Name’</li></ol><blockquote><p>git config –global user.email ‘email\@example.com’;</p></blockquote><a id="more"></a><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><ol><li><p>创建版本库：仓库：repository</p><blockquote><p>Git init：将一个目录变成可管理的仓库</p></blockquote></li><li><p>git add 文件名：把文件添加到版本库</p></li><li>git commit -m “discribe”：把文件提交到仓库//可以add多个，一次commit</li><li>git status：查看结果；</li><li>git diff：查看difference；</li><li>git log:查看日志；//提交历史</li><li>git reset –hard HEAD\^:回到上一个版本；//HEAD\^\^:上两个版本；HEAD~num：前num个版本；</li><li>git reset –hard commit id：回到某一个版本；//既可以回退版本，也可以把暂存区的修改回退到工作区；</li><li>git reflog：记录每一次命令；//命令历史</li><li><p>版本库：//记录每一次的修改<br><img src="http://pjx6k98jg.bkt.clouddn.com/image1.png" alt=""></p><blockquote><p>Stage/index：暂存区<br>Master：自动创建的第一支分支；<br>Git add 把文件修改添加到暂存区，git commit：把暂存区的文件提交到当前分支</p></blockquote></li><li><p>git checkout –文件名：让文件回到最近一次git commit或git add时的状态；//没有—file则命令变成切换到另一分支；</p></li><li>git rm：删除一个文件；</li></ol><h2 id="三、远程仓库"><a href="#三、远程仓库" class="headerlink" title="三、远程仓库"></a>三、远程仓库</h2><ol><li><p>Git和github之间的传输通过SSH加密</p></li><li><p>git push：把本地库的内容推送给到远程，实际是把当前分支推送到远程；</p></li><li><p>git clone：克隆一个本地库；</p></li></ol><h2 id="四、分支管理"><a href="#四、分支管理" class="headerlink" title="四、分支管理"></a>四、分支管理</h2><ol><li>创建与合并分支</li></ol><ul><li><p>Master分支：主分支；head严格指向master，master指向提交，head指的是值向当前分支；</p></li><li><p>git checkout -b dev: 创建并切换；//相当于git branch dev；git checkout dev；git branch 查看当前分支；git checkout master；切换分支；</p></li><li><p>git merge dev：合并指定分支到当前分支；//合并dev到master；</p></li><li><p>git branch -d dev：删除分支；</p></li><li><p>解决冲突：分支无法合并的时候，需要手动编辑再提交；</p></li><li><p>Git log –graph：可以看到分支合并图；</p></li><li><p>分支管理：再Fast-forward时，删除分支，会丢掉分支信息；强制禁用，就会在merge时产生一个新的commit；//加上—no-ff就变为普通合并，合并后的历史有分支；</p><p><img src="http://pjx6k98jg.bkt.clouddn.com/image2.png" alt="">{width=”5.46875in” height=”2.90625in”}</p><p><img src="http://pjx6k98jg.bkt.clouddn.com/image3.png" alt="">{width=”5.768055555555556in” height=”1.4222222222222223in”}</p></li><li><p>Bug分支：需修改bug，但正在进行的还没有办法提交，则把工作先储藏起来；</p></li><li><p>Git stash；</p></li><li><p>Git stash list；查看；</p></li><li><p>Git stash apply：恢复；//stash内容不会删除，需要用git stash drop删除；</p></li><li><p>Git stash pop：恢复；//恢复的同时把stash内容也删了；</p></li><li><p>Git stash apply stash@{0}:恢复指定的stash；</p></li><li><p>Git branch -D \&lt;name>：强行删除一个没有被合并过的分支；</p></li><li><p>Git remote：查看远程库的信息；//git remote -v 更详细</p></li><li><p>Git push origin master：把本地分支推送到远程库上对应分支；</p></li><li><p>多人协作：1.git push origin \&lt;branch-name>推送修改；2.如果失败，远程更新，则git pull合并；3.如果合并有冲突，则解决冲突，并在本地提交；4.没有冲突或解决掉冲突之后，再推送；//如果git pull时提示，no tracking information，说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to \&lt;branch-name> origin/\&lt;branch-name></p></li><li><p>Git rebase：把本地为push的分叉提交历史整理成直线；</p></li></ul><h2 id="五、标签管理"><a href="#五、标签管理" class="headerlink" title="五、标签管理"></a>五、标签管理</h2><ol><li><p>指向某个commit的分支，不可以移动，跟某个commit绑在一起；</p></li><li><p>创建标签：</p><ul><li><p>Git checkout master；切换到需要打标签的分支上；</p></li><li><p>Git tag \&lt;name>：创建标签；</p></li><li><p>Git tag：查看所有标签；</p></li><li><p>Git tag \&lt;name> commitId：对某一个commit打标签；//按字母排序；</p></li><li><p>Git show \&lt;tagname>：查看标签信息；</p></li><li><p>Git tag -a \&lt;name> -m discribe commitId://添加描述</p></li><li><p>Git tag –d name：删除标签；</p></li><li><p>Git push origin \&lt;tagname>：推送到远程；</p></li><li><p>Git push origin –tags：一次推送全部；</p></li><li><p>Git tag -d tagname；git push origin ：refs/tags/tagname；//从远程删除；</p></li></ul></li></ol><h2 id="六、github"><a href="#六、github" class="headerlink" title="六、github"></a>六、github</h2><ol><li><p>fork：在自己的账号下clone开源项目；</p></li><li><p>clone：从自己的账号下克隆到本地；</p></li><li><p>pull request：推送自己的修改；</p></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript知识集锦</title>
      <link>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</link>
      <guid>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</guid>
      <pubDate>Fri, 14 Dec 2018 09:42:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、Javascript基础&quot;&gt;&lt;a href=&quot;#一、Javascript基础&quot; class=&quot;headerlink&quot; title=&quot;一、Javascript基础&quot;&gt;&lt;/a&gt;一、Javascript基础&lt;/h2&gt;&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Netscape公司开发，直接嵌入到html中，直接在浏览中解释执行&lt;/p&gt;
&lt;p&gt;对象和事件是两个核心&lt;/p&gt;
&lt;p&gt;ECMA作为标准&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、Javascript基础"><a href="#一、Javascript基础" class="headerlink" title="一、Javascript基础"></a>一、Javascript基础</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>Netscape公司开发，直接嵌入到html中，直接在浏览中解释执行</p><p>对象和事件是两个核心</p><p>ECMA作为标准</p></blockquote><a id="more"></a><h3 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h3><blockquote><p>对客户端的事件进行处理</p><p>与用户进行交互</p><p>增强网页动态性</p><p>通过自带的document对象操纵文档</p><p>对浏览器窗口进行控制</p><p>Ajax技术的核心组成</p><p>MVC-model view contral</p></blockquote><h3 id="3．语言特性"><a href="#3．语言特性" class="headerlink" title="3．语言特性"></a>3．语言特性</h3><blockquote><p>基于对象：提供内置对象</p><p>事件驱动：脚本语言特性</p><p>简单性：弱类型语言</p><p>动态性：实时与网页交互</p><p>跨平台：浏览器解释执行</p></blockquote><h3 id="4-构成部分"><a href="#4-构成部分" class="headerlink" title="4.构成部分"></a>4.构成部分</h3><blockquote><p>核心（ECMAScript）</p><p>DOM、文档对象模型（document object model）</p><p>BOM、浏览器对象模型</p></blockquote><h3 id="5-引入"><a href="#5-引入" class="headerlink" title="5.引入"></a>5.引入</h3><blockquote><p>Head或者body最后\&lt;script src=\’main.js\’>\&lt;/script></p><p><img src="D:/moveFC/Documents/media/image1.png" alt="">{width=”2.84375in” height=”0.6979166666666666in”}</p><p>注：因为script是对网页动态操作，所以最好等文档加载完毕再载入js文件，所以最好放在body底部</p></blockquote><h3 id="6-注释格式"><a href="#6-注释格式" class="headerlink" title="6.注释格式"></a>6.注释格式</h3><blockquote><p><img src="D:/moveFC/Documents/media/image2.png" alt="">{width=”2.5625in” height=”1.625in”}</p></blockquote><h3 id="7-弱类型变量"><a href="#7-弱类型变量" class="headerlink" title="7.弱类型变量"></a>7.弱类型变量</h3><blockquote><p><img src="D:/moveFC/Documents/media/image3.png" alt="">{width=”2.3125in” height=”1.28125in”}</p><p>区分大小写；</p><p>字母、_、\$、数字；不能以数字开头；</p><p>不使用var声明变量，则默认为window.变量名</p></blockquote><h3 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8.数据类型"></a>8.数据类型</h3><blockquote><p>Undefined：未定义</p><p>值：undefined</p><p>Null：空</p><p>值：null</p><p>Number：数字</p><p>值：整数、浮点数、非数值（NaN）</p><p>NaN：0/0返回NaN、正数/0：正无穷、负数/0：负无穷、涉及NaN都会返回NaN、NaN与任何值不相等，包括NaN</p><p>IsNaN（）：是否不是数；</p><p>parstInt()：转换，直到找到第一个不是数；</p><p>parstFloat()：只解析十进制</p><p>String：字符串</p><p>字符：\n:换行、\t:制表、[\\斜杠、\]{.underline}转义</p><p>Str.lenth:长度</p><p>“+”：相连</p><p>转换：</p><p>Str.toString():有参数代表进制、转换的值是null或者undefined则报错</p><p>String(str):在不知道要转换的值是否是null或者undefined</p><p>Str+””;//str为要转换的</p></blockquote><p>Boolean：布尔值</p><p>值：true和false；可以转换为1和0</p><p>方法：Boolean（）</p><p>Object：对象</p><p>var o=new Object();//构造方法</p><p>var o=null;//内容为空</p><p>var o={a:1;b:2};//</p><h2 id="二、操作符、语句"><a href="#二、操作符、语句" class="headerlink" title="二、操作符、语句"></a>二、操作符、语句</h2><h3 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h3><blockquote><p>If、while、do…while、for、for-in、break、continue、switch</p></blockquote><h3 id="2-操作符"><a href="#2-操作符" class="headerlink" title="2.操作符"></a>2.操作符</h3><p>i.  一元加、减</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.  typeof 检查类型//产生一个类型</span><br><span class="line"></span><br><span class="line">2.  ++自增</span><br><span class="line"></span><br><span class="line">3.  \--自减</span><br><span class="line"></span><br><span class="line">4.  +一元加//对非数值应用相当于Number();-一元减同样</span><br></pre></td></tr></table></figure><h3 id="3-布尔操作符"><a href="#3-布尔操作符" class="headerlink" title="3.布尔操作符"></a>3.布尔操作符</h3><blockquote><p>！param；//先转换为布尔值在求反</p><p>！！；//相当于Boolean();</p><p>逻辑与（&amp;&amp;）；//短路操作；一假则假；在有一个数不是布尔值的情况下，不一定返回布尔值；第一个值是对象，返回第二个值；第二个只是对象，只有第一个为true，才返回该对象；两个都是对象，返回第二个；有一个null，返回null；有一个NaN，返回NaN；有一个为undefined，返回undefined；//两个值都为真，返回第二个；</p><p>逻辑或（||）；//短路操作；一诊则真；var myObject=o||obj;//提供后备操作</p></blockquote><h3 id="4-乘性操作符"><a href="#4-乘性操作符" class="headerlink" title="4.乘性操作符"></a>4.乘性操作符</h3><blockquote><p>*、/、%</p></blockquote><h3 id="5-加性"><a href="#5-加性" class="headerlink" title="5.加性"></a>5.加性</h3><h3 id="6-比较"><a href="#6-比较" class="headerlink" title="6.比较"></a>6.比较</h3><blockquote><p>==//相等undefined==null</p><p>！=//不想等</p><p>===//全等</p><p>！==//不全等undefined！==null</p><p>如果两个都是对象，则比较是不是同一个对象</p></blockquote><h3 id="7．三元"><a href="#7．三元" class="headerlink" title="7．三元"></a>7．三元</h3><blockquote><p>（条件）？真：假</p></blockquote><h3 id="8-关系"><a href="#8-关系" class="headerlink" title="8.关系"></a>8.关系</h3><blockquote><p>\&lt;、>、\&lt;=、>=、</p></blockquote><h3 id="9-赋值"><a href="#9-赋值" class="headerlink" title="9.赋值"></a>9.赋值</h3><blockquote><p>=、*=、/=、%=、+=、-=</p></blockquote><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><blockquote><p>1.</p><p><img src="D:/moveFC/Documents/media/image4.png" alt="">{width=”2.7083333333333335in” height=”2.2916666666666665in”}</p><p>2.可以两个同姓名的函数，后面的会覆盖前面的，js没有重载</p><p>3.位于return后面的代码永远不会执行</p></blockquote><h2 id="四、引用类型"><a href="#四、引用类型" class="headerlink" title="四、引用类型"></a>四、引用类型</h2><h3 id="1-Object类型"><a href="#1-Object类型" class="headerlink" title="1.Object类型"></a>1.Object类型</h3><p>1)、声明</p><p>var o = new Object;</p><p>var o = {a:1,b:2};</p><p>2)、访问</p><p>var o = {a:1,b:2};o.a;</p><p>var o = {a:1};o[“a”];</p><h3 id="2-Array类型-数组"><a href="#2-Array类型-数组" class="headerlink" title="2.Array类型-数组"></a>2.Array类型-数组</h3><p>1)、数组中的每一项可以保存不同类型的值</p><p>2）、创建</p><p>var arr=new Array();</p><p>var arr=new Array(20);</p><p>var arr=new Array(‘1’,’2’);</p><blockquote><p>var arr= Array(20);</p></blockquote><p>var arr= Array(‘1’,’2’);</p><blockquote><p>var arr=[];</p><p>var arr=[‘1’,’2’];</p></blockquote><p>3)、length//可以修改，末尾移除或者添加新的项</p><p>4）、转换</p><p>Join():arr.join(“+”)//通过+链接每一项，不传参，默认逗号连接</p><p>push():arr.push(“3”,”4”)//改变数组，添加到末尾，返回数组的数量；</p><p>pop()：arr.pop()//改变数组，移除最后一项，返回移除的项；</p><p>shift():arr.shift()//改变数组，移除第一项，返回移除的项</p><p>unshift():arr. unshift (“3”,”4”)//改变数组，添加到开头，返回数组的数量；</p><p>reverse()://重排序，反转数组项</p><p>sort()://重排序，调用toString(),比较排序</p><p>concat():var clonearr=arr.concat(“4”,”5”)//不改变数组，复制后新增</p><p>slice():var newarr=arr.slice();//不改变数组；一个参数：从参数位置到最后；两个参数：截取两个参数之间；</p><p>splice():arr.splice();//改变数组；1.删除：两个参数（起始位置，要删除的项数）；2.添加，三个参数（起始位置，0，要添加的项）；3.替换，三个参数（起始位置，删除的项数，添加的项）</p><p>indexOf():arr.indexOf(要查找的项，起始位置)//返回位置，ie9以下不支持；找不到返回-1</p><h3 id="3-Date类型"><a href="#3-Date类型" class="headerlink" title="3.Date类型"></a>3.Date类型</h3><p>1）、创建</p><p>var now = new Data();//创建一个日期对象、返回当地时间；</p><p>var curr = new Date(“月 日 年 时：分：秒”)；//</p><p>var curr = new Date(年，月，日，时，分，秒)；//月份从0开始，0-11；</p><p>2）、获取</p><p>var curr = new Date();</p><p>curr.getTime();//返回距1970年1月1日的毫秒数</p><p>curr.getFullYear();//年</p><blockquote><p>curr.getMonth();//月</p><p>curr.getDate();//日，月中的日，几号</p></blockquote><p>curr.getDay();//日，周中的日，星期几</p><p>curr.getHours();//小时</p><p>curr.getMinutes();//分钟</p><p>curr.getSeconds();//秒</p><p>3）定时器</p><p>setInterval();</p><p>clearInterval();</p><p>setTimeout();</p><h2 id="五、DOM"><a href="#五、DOM" class="headerlink" title="五、DOM"></a>五、DOM</h2><h3 id="1-dom树"><a href="#1-dom树" class="headerlink" title="1.dom树"></a>1.dom树</h3><blockquote><p>1）、元素节点、属性节点、文本节点</p><p>2）、节点信息</p><p>Element.nodeName//</p><p>Element.nodeValue//</p><p>Element.nodeType//元素节点返回1、属性节点返回2、文本节点返回3</p><p>3）、节点关系</p><p>Element.childNodes;//返回子节点的NodeList;</p><p>childNodes[0]或childNodes.item(0);</p><p>element.firstChild;//返回元素的首个子节点；</p><p>element.lastChild;//返回元素的最后一个子节点；</p><p>element.parentNode;//返回元素的父节点；</p></blockquote><p>element.previousSibling;//返回元素的前一个兄弟节点；</p><p>element.nextSibling;//返回元素的下一个兄弟节点；</p><h3 id="2-操作节点"><a href="#2-操作节点" class="headerlink" title="2.操作节点"></a>2.操作节点</h3><blockquote><p>1）、获取</p><p>document.getElementById();</p><p>document.getElementsByClassName();//IE9+</p><p>document.getElementsByTagName();</p><p>2）、赋值</p><p>Element.属性=值；//className；id；title；innerHTML；</p><p>Element.textContent;//设置或返回节点及其后代的文本内容；IE8不支持</p><p>Element.style;//将css中写法转换为驼峰式</p><p>3）、length</p><p>nodeLIst.length;//返回节点数</p><p>4）、获取或设置属性</p><p>Element.getAttribute(属性)；//获取元素的某个属性</p><p>Element.setAttribute(属性，值)；//设置元素的某个属性；</p><p>Element.removeAttribute(属性)；//从元素中移除指定属性；</p><p>Element.hasAttribute(属性)；//元素中有指定属性，返回true；</p><p>Element.hasChildNodes()；//元素拥有子节点，返回true；</p><p>5）、操作节点</p><p>Element.appendChild(要添加的节点);//向元素添加新节点，作为最后一个子节点；</p><p>Element.insertBefore(要添加的节点，添加的位置);//向指定位置添加节点</p><p>Element.removeChild(要移除的位置);//移除指定位置子节点</p><p>Element.replaceChild(要替换成的节点，被替换的节点);</p><p>Element.cloneNode(0:克隆本身;1:克隆所有);//克隆节点</p><p>6）、创建新元素</p><p>Element.createElement(‘标签名’)；//创建新节点</p><p>Element.createTextNode(“新段落”)；//创建文本节点；</p></blockquote><h3 id="3-DOM扩展"><a href="#3-DOM扩展" class="headerlink" title="3.DOM扩展"></a>3.DOM扩展</h3><blockquote><p>1）、querySelector(“css选择符”);//返回匹配的第一个，没有返回null</p><p>2）、querySelectorAll(“css选择符”);// 返回匹配的所有，没有返回null</p><p>3）、getComputedStyle(要获取的对象，”伪类的名字”).属性；//</p><p>getComputedStyle(dom,null).width;</p></blockquote><h3 id="4-元素位置"><a href="#4-元素位置" class="headerlink" title="4.元素位置"></a>4.元素位置</h3><p>1）、clientHeight();//可见高度</p><p>2）、offsetWidth();//返回元素的宽度，包含padding和border</p><p>3)、scrollWidth();//返回元素的整体宽度；</p><p>4）、offsetLeft();//返回元素的水平偏移位置；offsetTop</p><p>5）、offsetParent();//返回元素的偏移容器；</p><p>6）、scrollLeft();//元素左边缘与视图之间的距离；scrollTop();</p><h3 id="5-事件"><a href="#5-事件" class="headerlink" title="5.事件"></a>5.事件</h3><p>onclick</p><h2 id="六、BOM"><a href="#六、BOM" class="headerlink" title="六、BOM"></a>六、BOM</h2><h3 id="1-BOM核心"><a href="#1-BOM核心" class="headerlink" title="1.BOM核心"></a>1.BOM核心</h3><blockquote><p>1）、核心对象：window;</p><p>2）、窗口大小：window.screenLeft; window.screenTop</p><p>3）、视口大小：clientWidth();</p></blockquote><h3 id="2-弹出框"><a href="#2-弹出框" class="headerlink" title="2.弹出框"></a>2.弹出框</h3><p>1）alert（）；</p><p>2）prompt（）；</p><p>3）confirm（）；</p><h3 id="3-location-；-与当前窗口加载的文档有关的信息；"><a href="#3-location-；-与当前窗口加载的文档有关的信息；" class="headerlink" title="3.location()；//与当前窗口加载的文档有关的信息；"></a>3.location()；//与当前窗口加载的文档有关的信息；</h3><p>1）、hash:url中#后的多个字符</p><p>2）、host:服务器名和端口号</p><p>3）、hostname:服务器名</p><p>4）、href:当前页面完整的url</p><p>5）、pathname：目录和文件名</p><p>6）、protocol：使用的协议</p><p>7）、search：返回url的查询字符串，以问号开头</p><p>8）、decodeURIComponent();//编码</p><h3 id="4-处理字符串"><a href="#4-处理字符串" class="headerlink" title="4.处理字符串"></a>4.处理字符串</h3><p>substring(start,stop可选);//介于两个制定下标之间的字符，不接受负的参数；</p><p>split(separator,howmany可选);//把一个字符串分割成字符数组；str.split()与arr.join()相反；</p><ol><li>Navigator//检测浏览器的用户代理字符串</li></ol><blockquote><p>1）、navigator.userAgent;</p></blockquote><h2 id="七、事件处理与错误处理"><a href="#七、事件处理与错误处理" class="headerlink" title="七、事件处理与错误处理"></a>七、事件处理与错误处理</h2><h3 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1.事件处理"></a>1.事件处理</h3><p>1）、事件冒泡与捕获</p><p>事件冒泡：由具体节点开始、逐级向上传播到文档</p><p>事件捕获：根节点最早接收到事件，然后逐级向下传播到具体节点</p><p>2）、事件对象</p><p>在触发dom上某个事件时，会产生一个事件对象event，包含：1导致事件的元素、时间的类型、3及其他与特定事件相关的信息；</p><p>Event对象的属性和方法：bubbles：返回布尔值，指示事件是否是起泡事件类型；target:时间的目标节点；preventDefault():通知浏览器不要执行与事件关联的默认动作；stopPropagation():取消事件的冒泡与捕获；</p><blockquote><p>IE中的事件对象event：window.event；cancelBubble:默认为false，修改为true可以取消事件冒泡；returnValue:默认为true，修改为false可以取消事件的默认行为；srcElement:事件的目标；</p><p>Event的兼容性写法：event？event：window.event；</p><p>event.target||event.srcElement；</p><p>event.preventDefault?event.preventDefault():(event.returnValue=false);</p><p>event.stopPropagation?event.stopPropagation():(event.cancelBubble=true);</p></blockquote><p>3）、鼠标与滚轮事件</p><blockquote><p>Click、dbclick、mousedown、mouseenter（外部首次移动到内部触发，不冒泡）、mouseleave(不冒泡)、mousemove（在元素内部移动时触发）、mouseout（从一个元素移动到另一个元素时触发，不论是子元素还是外部）、mouseover（首次移入一个元素触发）、mouseup（抬起鼠标时触发）；</p><p>Btn.onclick=null;//解除绑定</p><p>事件处理程序：addEventListener(事件名，调用函数，布尔值)-监听事件//可以监听多个事件，按顺序触发，布尔值=true，表示在捕获阶段调用，false则是冒泡阶段；</p><p>removeEventListener(事件名，调用函数，布尔值)-解除监听//如果时匿名函数，则无法解除；</p><p>IE事件处理程序：attachEvent(on事件名，调用函数)//多个事件反序执行；</p><p>DetchEvent(on事件名，调用函数)；//匿名函数无法解除</p><p>触发顺序：mousedown、mouseup、click、mousedown、mouseup、click、dbclick</p><p>Mousewheel：滚轮事件；//会冒泡，wheelDelta值的正负判断滚轮滚动方向，向上为正，向下为负；</p><p>键盘事件：onkeydown;onkeypress;onkeyup;ontextInput(文本插入文本框之前触发)；onkeypress在onkeydown之后触发，任何一个键都会触发onkeydown，onkeypress只会（a-z）触发；event对象包含keyCode属性表示键码；textInput事件只有在可编辑区域、当用户按下能够输入实际字符的键时才会触发，event对象的data值为输入的字符，inputMethod表示把文本输入到文本框的方式；</p></blockquote><p>4）、HTML事件</p><p>Load、unload、abort、error、select、resize、scroll</p><p>5）、焦点事件</p><p>Onblur（失去焦点，不会冒泡）、onfocus、onfocusin：冒泡、onchange（对象的值改变、且事件对象失去焦点，监听控件的值是否改变）；</p><p>6）、变动事件</p><p>7）、触摸与手势事件</p><p>Touchstart、touchmove、touchend；//都会冒泡；</p><p>跟踪触摸的属性：touches：表示当前跟踪的触摸操作的touch对象的数组；targetTouchs：特定于事件目标的touch对象的数组；changeTouchs：表示自上次触摸以来发生了什么改变的Touch对象的数组；</p><p>Touch对象：clientX：视口中X的坐标值；identifier：标识触摸的唯一ID；pageX页面中X坐标值；screenX：在屏幕中的x坐标值；target：出没的节点目标；</p><p>Gesturestart\gesturechange\gestureend</p><h3 id="2-错误处理与调试"><a href="#2-错误处理与调试" class="headerlink" title="2.错误处理与调试"></a>2.错误处理与调试</h3><blockquote><p><img src="D:/moveFC/Documents/media/image5.png" alt="">{width=”3.3541666666666665in” height=”1.6875in”}</p><p><img src="D:/moveFC/Documents/media/image6.png" alt="">{width=”4.010416666666667in” height=”2.0625in”}</p><p>错误类型：</p><p>RangeError：数值超出相应范围时触发</p><p>TypeError</p><p>throw：抛出错误；//必须给throw指定一个值，遇到throw代码会立即停止执行，仅当有try-catch捕获到被抛出的值时才会继续执行；</p></blockquote><h2 id="八、表单及正则表达式"><a href="#八、表单及正则表达式" class="headerlink" title="八、表单及正则表达式"></a>八、表单及正则表达式</h2><h3 id="1-获取表单"><a href="#1-获取表单" class="headerlink" title="1.获取表单"></a>1.获取表单</h3><ol><li>添加id，getElementById；</li><li>Document.forms获取页面中所有表单、通过索引值或name来获取特定表单；</li></ol><h3 id="2-表单提交"><a href="#2-表单提交" class="headerlink" title="2.表单提交"></a>2.表单提交</h3><blockquote><p>1）、submit按钮提交表单，提交前会触发form表单中的submit事件</p><p>2）、submit事件可以直接提交表单，不会触发submit事件，要提前验证数据；</p></blockquote><h3 id="3-表单字段"><a href="#3-表单字段" class="headerlink" title="3.表单字段"></a>3.表单字段</h3><p>Form.elements[0]或者form.elements[“name值”]；//如果多个控件有同一个name，则返回一个NodeList；</p><ol><li>表单共有属性</li></ol><blockquote><p>1）、Disabled：布尔值，当前元素是否被禁用；</p><p>2）、Form</p><p>3）、Name</p><p>4）、tableIndex</p><p>5）、Type</p><p>6）、Value：将被提交给服务器的值</p></blockquote><p>4、共有的表单事件</p><p>1）、Blur；//元素失去焦点</p><p>2）、Change;//元素失去焦点且Value被改变</p><p>3）、Focud；//获得焦点时</p><p>//当使用了blur（）和focus（）方式时，都可以触发blur和focus事件</p><ol><li>选框脚本</li></ol><blockquote><p>1）、Add（option，relop）；//如果想在最后添加，relop为undefined</p><p>2）、options；//所有option控件</p><p>3）、Remove（index）;//移除指定位置</p><p>4）、selectIndex；//基于0的选中项的索引，没有则为-1；</p><p>5）、没有选中项：value=””；如果有一个：value=”设定的值”或option之间的文本</p></blockquote><h3 id="4-option元素属性"><a href="#4-option元素属性" class="headerlink" title="4.option元素属性"></a>4.option元素属性</h3><p>1）、Index：当前选项在options集合中的索引；</p><p>2）、Selected：设置为true可以选中当前值；</p><p>3）、text：选项的文本；</p><p>4）、Value：选项的值；</p><h3 id="5-RegExp"><a href="#5-RegExp" class="headerlink" title="5.RegExp"></a>5.RegExp</h3><p>1）、创建：var exp=/pattern/flags；//flags表示匹配模式，g表示全局；i表示不区分大小写；m表示多行；new RegExp（’pattern’，’flags’）</p><p>2)、exec（要检验的字符串）；//返回一个数组；包含两个额外的属性；第一个匹配项的信息；index：匹配项在字符中的位置；input：表示应用正则表达式的字符串；没有匹配项返回null；</p><p>3）、test(要检验的字符串)；//有匹配项返回true，无返回false</p><p>4）、match（正则表达式）；//非全局模式和exec的返回值相同；全局模式，返回所有匹配项的结果集；</p><h2 id="九、Ajax和json"><a href="#九、Ajax和json" class="headerlink" title="九、Ajax和json"></a>九、Ajax和json</h2><h3 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1.Ajax"></a>1.Ajax</h3><p>1）、Asynchronous JavaScript+XML；</p><p>2）、能够向服务器请求额外的数据无需重载页面的技术；</p><p>3）、核心是XMLHttpRequest，简称XHR，通过XHR获取新的数据，再通过dom插入页面；</p><h3 id="2-XMLHttpRequest对象"><a href="#2-XMLHttpRequest对象" class="headerlink" title="2.XMLHttpRequest对象"></a>2.XMLHttpRequest对象</h3><p>1)、var xhr=new XMLHttpRequest（）；</p><blockquote><p>2）、xhr.open（）；启动请求准备发送//1.要发送的请求的类型（get或post）；2.请求的URL（目标地址）；3.表示是否发送请求的布尔值（同步：false；异步：true）；</p><p>3）、xhr.send（null）；//一个参数，发送的数据，无则为null</p></blockquote><h3 id="3-同步请求"><a href="#3-同步请求" class="headerlink" title="3.同步请求"></a>3.同步请求</h3><blockquote><p>1）、js会等到服务器相应再继续执行，服务器返回的数据会自动填充XHR对象的属性；</p><p>2）、responseText：作为响应主体被返回的text；</p><p>3）、responseXML：如果相应的内容类型是text/xml或application/xml，这个属性保存包含着相应数据的xml dom文档；</p><p>4）、status：相应的http状态；</p><p>5）、statusText：http状态的说明；</p><p>接收相应后，第一步检查status属性，确定是否成功（200成功，304表示读取浏览器缓存内容）；</p><p><img src="D:/moveFC/Documents/media/image7.png" alt="">{width=”5.59375in” height=”1.7395833333333333in”}</p></blockquote><h3 id="4-异步请求"><a href="#4-异步请求" class="headerlink" title="4.异步请求"></a>4.异步请求</h3><blockquote><p>1）、请求发出后，js继续执行；此时检查xhr对象的readyState属性；请求响应过程的当前活动阶段；</p><p>2）、0：未初始化，未调用open()方法；</p><p>3）、1：启动，调用open(),但为调用send();</p><p>4)、2：发送，调用send(),但为响应</p><p>5）、3：接收，已经接收部分相应数据；</p><p>6）、4：完成，已经接受完所有相应数据，且可以在浏览器中使用；</p><p>7）、只要readyState属性的值从一个变成另一个，就会触发readystatechange事件，必须在open()方法之前指定onreadystatechange事件；</p><p>8）、xhr.abort();//取消异步请求；</p><p>9）、xhr=null;//xhr解引；</p></blockquote><h3 id="5-跨域请求"><a href="#5-跨域请求" class="headerlink" title="5.跨域请求"></a>5.跨域请求</h3><p>1）、CORS</p><p>2）、图像ping</p><h3 id="6-JSON"><a href="#6-JSON" class="headerlink" title="6.JSON"></a>6.JSON</h3><p>1）、数据在键值对中；数据由逗号分隔、花括号保存对象；方括号保存数组；</p><p>2）、跨域请求-JSONP：Json with padding；被包含在函数中的json；</p><blockquote><p>Callback（{“a”:1}）;//由回调和数据组成；通过动态创建\&lt;script>使用，使用时为src指定一个跨域URL；</p></blockquote>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
