<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sensitive</title>
    <link>http://yoursite.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>心之所向 素履以往</description>
    <pubDate>Tue, 18 Dec 2018 02:28:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JavaScript知识集锦</title>
      <link>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/</link>
      <guid>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/</guid>
      <pubDate>Tue, 18 Dec 2018 02:24:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Git-amp-amp-github&quot;&gt;&lt;a href=&quot;#Git-amp-amp-github&quot; class=&quot;headerlink&quot; title=&quot;Git&amp;amp;&amp;amp;github&quot;&gt;&lt;/a&gt;Git&amp;amp;&amp;amp;github&lt;/h1&gt;&lt;h2 id=&quot;一、git简介&quot;&gt;&lt;a href=&quot;#一、git简介&quot; class=&quot;headerlink&quot; title=&quot;一、git简介&quot;&gt;&lt;/a&gt;一、git简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Git：分布式版本控制系统&lt;/li&gt;
&lt;li&gt;安装（Windows）：[&lt;a href=&quot;https://git-scm.com/downloads]{.underline}&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/downloads]{.underline}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Config：打开git-cmd：输入git config –global user.name ‘Your Name’&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;git config –global user.email ‘email\@example.com’;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h1 id="Git-amp-amp-github"><a href="#Git-amp-amp-github" class="headerlink" title="Git&amp;&amp;github"></a>Git&amp;&amp;github</h1><h2 id="一、git简介"><a href="#一、git简介" class="headerlink" title="一、git简介"></a>一、git简介</h2><ol><li>Git：分布式版本控制系统</li><li>安装（Windows）：[<a href="https://git-scm.com/downloads]{.underline}" target="_blank" rel="noopener">https://git-scm.com/downloads]{.underline}</a></li><li>Config：打开git-cmd：输入git config –global user.name ‘Your Name’</li></ol><blockquote><p>git config –global user.email ‘email\@example.com’;</p></blockquote><a id="more"></a><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><ol><li><p>创建版本库：仓库：repository</p><blockquote><p>Git init：将一个目录变成可管理的仓库</p></blockquote></li><li><p>git add 文件名：把文件添加到版本库</p></li><li>git commit -m “discribe”：把文件提交到仓库//可以add多个，一次commit</li><li>git status：查看结果；</li><li>git diff：查看difference；</li><li>git log:查看日志；//提交历史</li><li>git reset –hard HEAD\^:回到上一个版本；//HEAD\^\^:上两个版本；HEAD~num：前num个版本；</li><li>git reset –hard commit id：回到某一个版本；//既可以回退版本，也可以把暂存区的修改回退到工作区；</li><li>git reflog：记录每一次命令；//命令历史</li><li><p>版本库：//记录每一次的修改<br><img src="media/image1.png" alt="">{width=”5.197916666666667in” height=”2.6770833333333335in”}</p><blockquote><p>Stage/index：暂存区<br>Master：自动创建的第一支分支；<br>Git add 把文件修改添加到暂存区，git commit：把暂存区的文件提交到当前分支</p></blockquote></li><li><p>git checkout –文件名：让文件回到最近一次git commit或git add时的状态；//没有—file则命令变成切换到另一分支；</p></li><li>git rm：删除一个文件；</li></ol><h2 id="三、远程仓库"><a href="#三、远程仓库" class="headerlink" title="三、远程仓库"></a>三、远程仓库</h2><ol><li><p>Git和github之间的传输通过SSH加密</p></li><li><p>git push：把本地库的内容推送给到远程，实际是把当前分支推送到远程；</p></li><li><p>git clone：克隆一个本地库；</p></li></ol><h2 id="四、分支管理"><a href="#四、分支管理" class="headerlink" title="四、分支管理"></a>四、分支管理</h2><ol><li>创建与合并分支</li></ol><ul><li><p>Master分支：主分支；head严格指向master，master指向提交，head指的是值向当前分支；</p></li><li><p>git checkout -b dev: 创建并切换；//相当于git branch dev；git checkout dev；git branch 查看当前分支；git checkout master；切换分支；</p></li><li><p>git merge dev：合并指定分支到当前分支；//合并dev到master；</p></li><li><p>git branch -d dev：删除分支；</p></li><li><p>解决冲突：分支无法合并的时候，需要手动编辑再提交；</p></li><li><p>Git log –graph：可以看到分支合并图；</p></li><li><p>分支管理：再Fast-forward时，删除分支，会丢掉分支信息；强制禁用，就会在merge时产生一个新的commit；//加上—no-ff就变为普通合并，合并后的历史有分支；</p><p><img src="media/image2.png" alt="">{width=”5.46875in” height=”2.90625in”}</p><p><img src="media/image3.png" alt="">{width=”5.768055555555556in” height=”1.4222222222222223in”}</p></li><li><p>Bug分支：需修改bug，但正在进行的还没有办法提交，则把工作先储藏起来；</p></li><li><p>Git stash；</p></li><li><p>Git stash list；查看；</p></li><li><p>Git stash apply：恢复；//stash内容不会删除，需要用git stash drop删除；</p></li><li><p>Git stash pop：恢复；//恢复的同时把stash内容也删了；</p></li><li><p>Git stash apply stash@{0}:恢复指定的stash；</p></li><li><p>Git branch -D \&lt;name>：强行删除一个没有被合并过的分支；</p></li><li><p>Git remote：查看远程库的信息；//git remote -v 更详细</p></li><li><p>Git push origin master：把本地分支推送到远程库上对应分支；</p></li><li><p>多人协作：1.git push origin \&lt;branch-name>推送修改；2.如果失败，远程更新，则git pull合并；3.如果合并有冲突，则解决冲突，并在本地提交；4.没有冲突或解决掉冲突之后，再推送；//如果git pull时提示，no tracking information，说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to \&lt;branch-name> origin/\&lt;branch-name></p></li><li><p>Git rebase：把本地为push的分叉提交历史整理成直线；</p></li></ul><h2 id="五、标签管理"><a href="#五、标签管理" class="headerlink" title="五、标签管理"></a>五、标签管理</h2><ol><li><p>指向某个commit的分支，不可以移动，跟某个commit绑在一起；</p></li><li><p>创建标签：</p><ul><li><p>Git checkout master；切换到需要打标签的分支上；</p></li><li><p>Git tag \&lt;name>：创建标签；</p></li><li><p>Git tag：查看所有标签；</p></li><li><p>Git tag \&lt;name> commitId：对某一个commit打标签；//按字母排序；</p></li><li><p>Git show \&lt;tagname>：查看标签信息；</p></li><li><p>Git tag -a \&lt;name> -m discribe commitId://添加描述</p></li><li><p>Git tag –d name：删除标签；</p></li><li><p>Git push origin \&lt;tagname>：推送到远程；</p></li><li><p>Git push origin –tags：一次推送全部；</p></li><li><p>Git tag -d tagname；git push origin ：refs/tags/tagname；//从远程删除；</p></li></ul></li></ol><h2 id="六、github"><a href="#六、github" class="headerlink" title="六、github"></a>六、github</h2><ol><li><p>fork：在自己的账号下clone开源项目；</p></li><li><p>clone：从自己的账号下克隆到本地；</p></li><li><p>pull request：推送自己的修改；</p></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/18/Git&amp;&amp;GitHub/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript知识集锦</title>
      <link>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</link>
      <guid>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/</guid>
      <pubDate>Fri, 14 Dec 2018 09:42:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;一、Javascript基础&quot;&gt;&lt;a href=&quot;#一、Javascript基础&quot; class=&quot;headerlink&quot; title=&quot;一、Javascript基础&quot;&gt;&lt;/a&gt;一、Javascript基础&lt;/h2&gt;&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Netscape公司开发，直接嵌入到html中，直接在浏览中解释执行&lt;/p&gt;
&lt;p&gt;对象和事件是两个核心&lt;/p&gt;
&lt;p&gt;ECMA作为标准&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="一、Javascript基础"><a href="#一、Javascript基础" class="headerlink" title="一、Javascript基础"></a>一、Javascript基础</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><blockquote><p>Netscape公司开发，直接嵌入到html中，直接在浏览中解释执行</p><p>对象和事件是两个核心</p><p>ECMA作为标准</p></blockquote><a id="more"></a><h3 id="2-应用"><a href="#2-应用" class="headerlink" title="2.应用"></a>2.应用</h3><blockquote><p>对客户端的事件进行处理</p><p>与用户进行交互</p><p>增强网页动态性</p><p>通过自带的document对象操纵文档</p><p>对浏览器窗口进行控制</p><p>Ajax技术的核心组成</p><p>MVC-model view contral</p></blockquote><h3 id="3．语言特性"><a href="#3．语言特性" class="headerlink" title="3．语言特性"></a>3．语言特性</h3><blockquote><p>基于对象：提供内置对象</p><p>事件驱动：脚本语言特性</p><p>简单性：弱类型语言</p><p>动态性：实时与网页交互</p><p>跨平台：浏览器解释执行</p></blockquote><h3 id="4-构成部分"><a href="#4-构成部分" class="headerlink" title="4.构成部分"></a>4.构成部分</h3><blockquote><p>核心（ECMAScript）</p><p>DOM、文档对象模型（document object model）</p><p>BOM、浏览器对象模型</p></blockquote><h3 id="5-引入"><a href="#5-引入" class="headerlink" title="5.引入"></a>5.引入</h3><blockquote><p>Head或者body最后\&lt;script src=\’main.js\’>\&lt;/script></p><p><img src="D:/moveFC/Documents/media/image1.png" alt="">{width=”2.84375in” height=”0.6979166666666666in”}</p><p>注：因为script是对网页动态操作，所以最好等文档加载完毕再载入js文件，所以最好放在body底部</p></blockquote><h3 id="6-注释格式"><a href="#6-注释格式" class="headerlink" title="6.注释格式"></a>6.注释格式</h3><blockquote><p><img src="D:/moveFC/Documents/media/image2.png" alt="">{width=”2.5625in” height=”1.625in”}</p></blockquote><h3 id="7-弱类型变量"><a href="#7-弱类型变量" class="headerlink" title="7.弱类型变量"></a>7.弱类型变量</h3><blockquote><p><img src="D:/moveFC/Documents/media/image3.png" alt="">{width=”2.3125in” height=”1.28125in”}</p><p>区分大小写；</p><p>字母、_、\$、数字；不能以数字开头；</p><p>不使用var声明变量，则默认为window.变量名</p></blockquote><h3 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8.数据类型"></a>8.数据类型</h3><blockquote><p>Undefined：未定义</p><p>值：undefined</p><p>Null：空</p><p>值：null</p><p>Number：数字</p><p>值：整数、浮点数、非数值（NaN）</p><p>NaN：0/0返回NaN、正数/0：正无穷、负数/0：负无穷、涉及NaN都会返回NaN、NaN与任何值不相等，包括NaN</p><p>IsNaN（）：是否不是数；</p><p>parstInt()：转换，直到找到第一个不是数；</p><p>parstFloat()：只解析十进制</p><p>String：字符串</p><p>字符：\n:换行、\t:制表、[\\斜杠、\]{.underline}转义</p><p>Str.lenth:长度</p><p>“+”：相连</p><p>转换：</p><p>Str.toString():有参数代表进制、转换的值是null或者undefined则报错</p><p>String(str):在不知道要转换的值是否是null或者undefined</p><p>Str+””;//str为要转换的</p></blockquote><p>Boolean：布尔值</p><p>值：true和false；可以转换为1和0</p><p>方法：Boolean（）</p><p>Object：对象</p><p>var o=new Object();//构造方法</p><p>var o=null;//内容为空</p><p>var o={a:1;b:2};//</p><h2 id="二、操作符、语句"><a href="#二、操作符、语句" class="headerlink" title="二、操作符、语句"></a>二、操作符、语句</h2><h3 id="1-语句"><a href="#1-语句" class="headerlink" title="1.语句"></a>1.语句</h3><blockquote><p>If、while、do…while、for、for-in、break、continue、switch</p></blockquote><h3 id="2-操作符"><a href="#2-操作符" class="headerlink" title="2.操作符"></a>2.操作符</h3><p>i.  一元加、减</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.  typeof 检查类型//产生一个类型</span><br><span class="line"></span><br><span class="line">2.  ++自增</span><br><span class="line"></span><br><span class="line">3.  \--自减</span><br><span class="line"></span><br><span class="line">4.  +一元加//对非数值应用相当于Number();-一元减同样</span><br></pre></td></tr></table></figure><h3 id="3-布尔操作符"><a href="#3-布尔操作符" class="headerlink" title="3.布尔操作符"></a>3.布尔操作符</h3><blockquote><p>！param；//先转换为布尔值在求反</p><p>！！；//相当于Boolean();</p><p>逻辑与（&amp;&amp;）；//短路操作；一假则假；在有一个数不是布尔值的情况下，不一定返回布尔值；第一个值是对象，返回第二个值；第二个只是对象，只有第一个为true，才返回该对象；两个都是对象，返回第二个；有一个null，返回null；有一个NaN，返回NaN；有一个为undefined，返回undefined；//两个值都为真，返回第二个；</p><p>逻辑或（||）；//短路操作；一诊则真；var myObject=o||obj;//提供后备操作</p></blockquote><h3 id="4-乘性操作符"><a href="#4-乘性操作符" class="headerlink" title="4.乘性操作符"></a>4.乘性操作符</h3><blockquote><p>*、/、%</p></blockquote><h3 id="5-加性"><a href="#5-加性" class="headerlink" title="5.加性"></a>5.加性</h3><h3 id="6-比较"><a href="#6-比较" class="headerlink" title="6.比较"></a>6.比较</h3><blockquote><p>==//相等undefined==null</p><p>！=//不想等</p><p>===//全等</p><p>！==//不全等undefined！==null</p><p>如果两个都是对象，则比较是不是同一个对象</p></blockquote><h3 id="7．三元"><a href="#7．三元" class="headerlink" title="7．三元"></a>7．三元</h3><blockquote><p>（条件）？真：假</p></blockquote><h3 id="8-关系"><a href="#8-关系" class="headerlink" title="8.关系"></a>8.关系</h3><blockquote><p>\&lt;、>、\&lt;=、>=、</p></blockquote><h3 id="9-赋值"><a href="#9-赋值" class="headerlink" title="9.赋值"></a>9.赋值</h3><blockquote><p>=、*=、/=、%=、+=、-=</p></blockquote><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><blockquote><p>1.</p><p><img src="D:/moveFC/Documents/media/image4.png" alt="">{width=”2.7083333333333335in” height=”2.2916666666666665in”}</p><p>2.可以两个同姓名的函数，后面的会覆盖前面的，js没有重载</p><p>3.位于return后面的代码永远不会执行</p></blockquote><h2 id="四、引用类型"><a href="#四、引用类型" class="headerlink" title="四、引用类型"></a>四、引用类型</h2><h3 id="1-Object类型"><a href="#1-Object类型" class="headerlink" title="1.Object类型"></a>1.Object类型</h3><p>1)、声明</p><p>var o = new Object;</p><p>var o = {a:1,b:2};</p><p>2)、访问</p><p>var o = {a:1,b:2};o.a;</p><p>var o = {a:1};o[“a”];</p><h3 id="2-Array类型-数组"><a href="#2-Array类型-数组" class="headerlink" title="2.Array类型-数组"></a>2.Array类型-数组</h3><p>1)、数组中的每一项可以保存不同类型的值</p><p>2）、创建</p><p>var arr=new Array();</p><p>var arr=new Array(20);</p><p>var arr=new Array(‘1’,’2’);</p><blockquote><p>var arr= Array(20);</p></blockquote><p>var arr= Array(‘1’,’2’);</p><blockquote><p>var arr=[];</p><p>var arr=[‘1’,’2’];</p></blockquote><p>3)、length//可以修改，末尾移除或者添加新的项</p><p>4）、转换</p><p>Join():arr.join(“+”)//通过+链接每一项，不传参，默认逗号连接</p><p>push():arr.push(“3”,”4”)//改变数组，添加到末尾，返回数组的数量；</p><p>pop()：arr.pop()//改变数组，移除最后一项，返回移除的项；</p><p>shift():arr.shift()//改变数组，移除第一项，返回移除的项</p><p>unshift():arr. unshift (“3”,”4”)//改变数组，添加到开头，返回数组的数量；</p><p>reverse()://重排序，反转数组项</p><p>sort()://重排序，调用toString(),比较排序</p><p>concat():var clonearr=arr.concat(“4”,”5”)//不改变数组，复制后新增</p><p>slice():var newarr=arr.slice();//不改变数组；一个参数：从参数位置到最后；两个参数：截取两个参数之间；</p><p>splice():arr.splice();//改变数组；1.删除：两个参数（起始位置，要删除的项数）；2.添加，三个参数（起始位置，0，要添加的项）；3.替换，三个参数（起始位置，删除的项数，添加的项）</p><p>indexOf():arr.indexOf(要查找的项，起始位置)//返回位置，ie9以下不支持；找不到返回-1</p><h3 id="3-Date类型"><a href="#3-Date类型" class="headerlink" title="3.Date类型"></a>3.Date类型</h3><p>1）、创建</p><p>var now = new Data();//创建一个日期对象、返回当地时间；</p><p>var curr = new Date(“月 日 年 时：分：秒”)；//</p><p>var curr = new Date(年，月，日，时，分，秒)；//月份从0开始，0-11；</p><p>2）、获取</p><p>var curr = new Date();</p><p>curr.getTime();//返回距1970年1月1日的毫秒数</p><p>curr.getFullYear();//年</p><blockquote><p>curr.getMonth();//月</p><p>curr.getDate();//日，月中的日，几号</p></blockquote><p>curr.getDay();//日，周中的日，星期几</p><p>curr.getHours();//小时</p><p>curr.getMinutes();//分钟</p><p>curr.getSeconds();//秒</p><p>3）定时器</p><p>setInterval();</p><p>clearInterval();</p><p>setTimeout();</p><h2 id="五、DOM"><a href="#五、DOM" class="headerlink" title="五、DOM"></a>五、DOM</h2><h3 id="1-dom树"><a href="#1-dom树" class="headerlink" title="1.dom树"></a>1.dom树</h3><blockquote><p>1）、元素节点、属性节点、文本节点</p><p>2）、节点信息</p><p>Element.nodeName//</p><p>Element.nodeValue//</p><p>Element.nodeType//元素节点返回1、属性节点返回2、文本节点返回3</p><p>3）、节点关系</p><p>Element.childNodes;//返回子节点的NodeList;</p><p>childNodes[0]或childNodes.item(0);</p><p>element.firstChild;//返回元素的首个子节点；</p><p>element.lastChild;//返回元素的最后一个子节点；</p><p>element.parentNode;//返回元素的父节点；</p></blockquote><p>element.previousSibling;//返回元素的前一个兄弟节点；</p><p>element.nextSibling;//返回元素的下一个兄弟节点；</p><h3 id="2-操作节点"><a href="#2-操作节点" class="headerlink" title="2.操作节点"></a>2.操作节点</h3><blockquote><p>1）、获取</p><p>document.getElementById();</p><p>document.getElementsByClassName();//IE9+</p><p>document.getElementsByTagName();</p><p>2）、赋值</p><p>Element.属性=值；//className；id；title；innerHTML；</p><p>Element.textContent;//设置或返回节点及其后代的文本内容；IE8不支持</p><p>Element.style;//将css中写法转换为驼峰式</p><p>3）、length</p><p>nodeLIst.length;//返回节点数</p><p>4）、获取或设置属性</p><p>Element.getAttribute(属性)；//获取元素的某个属性</p><p>Element.setAttribute(属性，值)；//设置元素的某个属性；</p><p>Element.removeAttribute(属性)；//从元素中移除指定属性；</p><p>Element.hasAttribute(属性)；//元素中有指定属性，返回true；</p><p>Element.hasChildNodes()；//元素拥有子节点，返回true；</p><p>5）、操作节点</p><p>Element.appendChild(要添加的节点);//向元素添加新节点，作为最后一个子节点；</p><p>Element.insertBefore(要添加的节点，添加的位置);//向指定位置添加节点</p><p>Element.removeChild(要移除的位置);//移除指定位置子节点</p><p>Element.replaceChild(要替换成的节点，被替换的节点);</p><p>Element.cloneNode(0:克隆本身;1:克隆所有);//克隆节点</p><p>6）、创建新元素</p><p>Element.createElement(‘标签名’)；//创建新节点</p><p>Element.createTextNode(“新段落”)；//创建文本节点；</p></blockquote><h3 id="3-DOM扩展"><a href="#3-DOM扩展" class="headerlink" title="3.DOM扩展"></a>3.DOM扩展</h3><blockquote><p>1）、querySelector(“css选择符”);//返回匹配的第一个，没有返回null</p><p>2）、querySelectorAll(“css选择符”);// 返回匹配的所有，没有返回null</p><p>3）、getComputedStyle(要获取的对象，”伪类的名字”).属性；//</p><p>getComputedStyle(dom,null).width;</p></blockquote><h3 id="4-元素位置"><a href="#4-元素位置" class="headerlink" title="4.元素位置"></a>4.元素位置</h3><p>1）、clientHeight();//可见高度</p><p>2）、offsetWidth();//返回元素的宽度，包含padding和border</p><p>3)、scrollWidth();//返回元素的整体宽度；</p><p>4）、offsetLeft();//返回元素的水平偏移位置；offsetTop</p><p>5）、offsetParent();//返回元素的偏移容器；</p><p>6）、scrollLeft();//元素左边缘与视图之间的距离；scrollTop();</p><h3 id="5-事件"><a href="#5-事件" class="headerlink" title="5.事件"></a>5.事件</h3><p>onclick</p><h2 id="六、BOM"><a href="#六、BOM" class="headerlink" title="六、BOM"></a>六、BOM</h2><h3 id="1-BOM核心"><a href="#1-BOM核心" class="headerlink" title="1.BOM核心"></a>1.BOM核心</h3><blockquote><p>1）、核心对象：window;</p><p>2）、窗口大小：window.screenLeft; window.screenTop</p><p>3）、视口大小：clientWidth();</p></blockquote><h3 id="2-弹出框"><a href="#2-弹出框" class="headerlink" title="2.弹出框"></a>2.弹出框</h3><p>1）alert（）；</p><p>2）prompt（）；</p><p>3）confirm（）；</p><h3 id="3-location-；-与当前窗口加载的文档有关的信息；"><a href="#3-location-；-与当前窗口加载的文档有关的信息；" class="headerlink" title="3.location()；//与当前窗口加载的文档有关的信息；"></a>3.location()；//与当前窗口加载的文档有关的信息；</h3><p>1）、hash:url中#后的多个字符</p><p>2）、host:服务器名和端口号</p><p>3）、hostname:服务器名</p><p>4）、href:当前页面完整的url</p><p>5）、pathname：目录和文件名</p><p>6）、protocol：使用的协议</p><p>7）、search：返回url的查询字符串，以问号开头</p><p>8）、decodeURIComponent();//编码</p><h3 id="4-处理字符串"><a href="#4-处理字符串" class="headerlink" title="4.处理字符串"></a>4.处理字符串</h3><p>substring(start,stop可选);//介于两个制定下标之间的字符，不接受负的参数；</p><p>split(separator,howmany可选);//把一个字符串分割成字符数组；str.split()与arr.join()相反；</p><ol><li>Navigator//检测浏览器的用户代理字符串</li></ol><blockquote><p>1）、navigator.userAgent;</p></blockquote><h2 id="七、事件处理与错误处理"><a href="#七、事件处理与错误处理" class="headerlink" title="七、事件处理与错误处理"></a>七、事件处理与错误处理</h2><h3 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1.事件处理"></a>1.事件处理</h3><p>1）、事件冒泡与捕获</p><p>事件冒泡：由具体节点开始、逐级向上传播到文档</p><p>事件捕获：根节点最早接收到事件，然后逐级向下传播到具体节点</p><p>2）、事件对象</p><p>在触发dom上某个事件时，会产生一个事件对象event，包含：1导致事件的元素、时间的类型、3及其他与特定事件相关的信息；</p><p>Event对象的属性和方法：bubbles：返回布尔值，指示事件是否是起泡事件类型；target:时间的目标节点；preventDefault():通知浏览器不要执行与事件关联的默认动作；stopPropagation():取消事件的冒泡与捕获；</p><blockquote><p>IE中的事件对象event：window.event；cancelBubble:默认为false，修改为true可以取消事件冒泡；returnValue:默认为true，修改为false可以取消事件的默认行为；srcElement:事件的目标；</p><p>Event的兼容性写法：event？event：window.event；</p><p>event.target||event.srcElement；</p><p>event.preventDefault?event.preventDefault():(event.returnValue=false);</p><p>event.stopPropagation?event.stopPropagation():(event.cancelBubble=true);</p></blockquote><p>3）、鼠标与滚轮事件</p><blockquote><p>Click、dbclick、mousedown、mouseenter（外部首次移动到内部触发，不冒泡）、mouseleave(不冒泡)、mousemove（在元素内部移动时触发）、mouseout（从一个元素移动到另一个元素时触发，不论是子元素还是外部）、mouseover（首次移入一个元素触发）、mouseup（抬起鼠标时触发）；</p><p>Btn.onclick=null;//解除绑定</p><p>事件处理程序：addEventListener(事件名，调用函数，布尔值)-监听事件//可以监听多个事件，按顺序触发，布尔值=true，表示在捕获阶段调用，false则是冒泡阶段；</p><p>removeEventListener(事件名，调用函数，布尔值)-解除监听//如果时匿名函数，则无法解除；</p><p>IE事件处理程序：attachEvent(on事件名，调用函数)//多个事件反序执行；</p><p>DetchEvent(on事件名，调用函数)；//匿名函数无法解除</p><p>触发顺序：mousedown、mouseup、click、mousedown、mouseup、click、dbclick</p><p>Mousewheel：滚轮事件；//会冒泡，wheelDelta值的正负判断滚轮滚动方向，向上为正，向下为负；</p><p>键盘事件：onkeydown;onkeypress;onkeyup;ontextInput(文本插入文本框之前触发)；onkeypress在onkeydown之后触发，任何一个键都会触发onkeydown，onkeypress只会（a-z）触发；event对象包含keyCode属性表示键码；textInput事件只有在可编辑区域、当用户按下能够输入实际字符的键时才会触发，event对象的data值为输入的字符，inputMethod表示把文本输入到文本框的方式；</p></blockquote><p>4）、HTML事件</p><p>Load、unload、abort、error、select、resize、scroll</p><p>5）、焦点事件</p><p>Onblur（失去焦点，不会冒泡）、onfocus、onfocusin：冒泡、onchange（对象的值改变、且事件对象失去焦点，监听控件的值是否改变）；</p><p>6）、变动事件</p><p>7）、触摸与手势事件</p><p>Touchstart、touchmove、touchend；//都会冒泡；</p><p>跟踪触摸的属性：touches：表示当前跟踪的触摸操作的touch对象的数组；targetTouchs：特定于事件目标的touch对象的数组；changeTouchs：表示自上次触摸以来发生了什么改变的Touch对象的数组；</p><p>Touch对象：clientX：视口中X的坐标值；identifier：标识触摸的唯一ID；pageX页面中X坐标值；screenX：在屏幕中的x坐标值；target：出没的节点目标；</p><p>Gesturestart\gesturechange\gestureend</p><h3 id="2-错误处理与调试"><a href="#2-错误处理与调试" class="headerlink" title="2.错误处理与调试"></a>2.错误处理与调试</h3><blockquote><p><img src="D:/moveFC/Documents/media/image5.png" alt="">{width=”3.3541666666666665in” height=”1.6875in”}</p><p><img src="D:/moveFC/Documents/media/image6.png" alt="">{width=”4.010416666666667in” height=”2.0625in”}</p><p>错误类型：</p><p>RangeError：数值超出相应范围时触发</p><p>TypeError</p><p>throw：抛出错误；//必须给throw指定一个值，遇到throw代码会立即停止执行，仅当有try-catch捕获到被抛出的值时才会继续执行；</p></blockquote><h2 id="八、表单及正则表达式"><a href="#八、表单及正则表达式" class="headerlink" title="八、表单及正则表达式"></a>八、表单及正则表达式</h2><h3 id="1-获取表单"><a href="#1-获取表单" class="headerlink" title="1.获取表单"></a>1.获取表单</h3><ol><li>添加id，getElementById；</li><li>Document.forms获取页面中所有表单、通过索引值或name来获取特定表单；</li></ol><h3 id="2-表单提交"><a href="#2-表单提交" class="headerlink" title="2.表单提交"></a>2.表单提交</h3><blockquote><p>1）、submit按钮提交表单，提交前会触发form表单中的submit事件</p><p>2）、submit事件可以直接提交表单，不会触发submit事件，要提前验证数据；</p></blockquote><h3 id="3-表单字段"><a href="#3-表单字段" class="headerlink" title="3.表单字段"></a>3.表单字段</h3><p>Form.elements[0]或者form.elements[“name值”]；//如果多个控件有同一个name，则返回一个NodeList；</p><ol><li>表单共有属性</li></ol><blockquote><p>1）、Disabled：布尔值，当前元素是否被禁用；</p><p>2）、Form</p><p>3）、Name</p><p>4）、tableIndex</p><p>5）、Type</p><p>6）、Value：将被提交给服务器的值</p></blockquote><p>4、共有的表单事件</p><p>1）、Blur；//元素失去焦点</p><p>2）、Change;//元素失去焦点且Value被改变</p><p>3）、Focud；//获得焦点时</p><p>//当使用了blur（）和focus（）方式时，都可以触发blur和focus事件</p><ol><li>选框脚本</li></ol><blockquote><p>1）、Add（option，relop）；//如果想在最后添加，relop为undefined</p><p>2）、options；//所有option控件</p><p>3）、Remove（index）;//移除指定位置</p><p>4）、selectIndex；//基于0的选中项的索引，没有则为-1；</p><p>5）、没有选中项：value=””；如果有一个：value=”设定的值”或option之间的文本</p></blockquote><h3 id="4-option元素属性"><a href="#4-option元素属性" class="headerlink" title="4.option元素属性"></a>4.option元素属性</h3><p>1）、Index：当前选项在options集合中的索引；</p><p>2）、Selected：设置为true可以选中当前值；</p><p>3）、text：选项的文本；</p><p>4）、Value：选项的值；</p><h3 id="5-RegExp"><a href="#5-RegExp" class="headerlink" title="5.RegExp"></a>5.RegExp</h3><p>1）、创建：var exp=/pattern/flags；//flags表示匹配模式，g表示全局；i表示不区分大小写；m表示多行；new RegExp（’pattern’，’flags’）</p><p>2)、exec（要检验的字符串）；//返回一个数组；包含两个额外的属性；第一个匹配项的信息；index：匹配项在字符中的位置；input：表示应用正则表达式的字符串；没有匹配项返回null；</p><p>3）、test(要检验的字符串)；//有匹配项返回true，无返回false</p><p>4）、match（正则表达式）；//非全局模式和exec的返回值相同；全局模式，返回所有匹配项的结果集；</p><h2 id="九、Ajax和json"><a href="#九、Ajax和json" class="headerlink" title="九、Ajax和json"></a>九、Ajax和json</h2><h3 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1.Ajax"></a>1.Ajax</h3><p>1）、Asynchronous JavaScript+XML；</p><p>2）、能够向服务器请求额外的数据无需重载页面的技术；</p><p>3）、核心是XMLHttpRequest，简称XHR，通过XHR获取新的数据，再通过dom插入页面；</p><h3 id="2-XMLHttpRequest对象"><a href="#2-XMLHttpRequest对象" class="headerlink" title="2.XMLHttpRequest对象"></a>2.XMLHttpRequest对象</h3><p>1)、var xhr=new XMLHttpRequest（）；</p><blockquote><p>2）、xhr.open（）；启动请求准备发送//1.要发送的请求的类型（get或post）；2.请求的URL（目标地址）；3.表示是否发送请求的布尔值（同步：false；异步：true）；</p><p>3）、xhr.send（null）；//一个参数，发送的数据，无则为null</p></blockquote><h3 id="3-同步请求"><a href="#3-同步请求" class="headerlink" title="3.同步请求"></a>3.同步请求</h3><blockquote><p>1）、js会等到服务器相应再继续执行，服务器返回的数据会自动填充XHR对象的属性；</p><p>2）、responseText：作为响应主体被返回的text；</p><p>3）、responseXML：如果相应的内容类型是text/xml或application/xml，这个属性保存包含着相应数据的xml dom文档；</p><p>4）、status：相应的http状态；</p><p>5）、statusText：http状态的说明；</p><p>接收相应后，第一步检查status属性，确定是否成功（200成功，304表示读取浏览器缓存内容）；</p><p><img src="D:/moveFC/Documents/media/image7.png" alt="">{width=”5.59375in” height=”1.7395833333333333in”}</p></blockquote><h3 id="4-异步请求"><a href="#4-异步请求" class="headerlink" title="4.异步请求"></a>4.异步请求</h3><blockquote><p>1）、请求发出后，js继续执行；此时检查xhr对象的readyState属性；请求响应过程的当前活动阶段；</p><p>2）、0：未初始化，未调用open()方法；</p><p>3）、1：启动，调用open(),但为调用send();</p><p>4)、2：发送，调用send(),但为响应</p><p>5）、3：接收，已经接收部分相应数据；</p><p>6）、4：完成，已经接受完所有相应数据，且可以在浏览器中使用；</p><p>7）、只要readyState属性的值从一个变成另一个，就会触发readystatechange事件，必须在open()方法之前指定onreadystatechange事件；</p><p>8）、xhr.abort();//取消异步请求；</p><p>9）、xhr=null;//xhr解引；</p></blockquote><h3 id="5-跨域请求"><a href="#5-跨域请求" class="headerlink" title="5.跨域请求"></a>5.跨域请求</h3><p>1）、CORS</p><p>2）、图像ping</p><h3 id="6-JSON"><a href="#6-JSON" class="headerlink" title="6.JSON"></a>6.JSON</h3><p>1）、数据在键值对中；数据由逗号分隔、花括号保存对象；方括号保存数组；</p><p>2）、跨域请求-JSONP：Json with padding；被包含在函数中的json；</p><blockquote><p>Callback（{“a”:1}）;//由回调和数据组成；通过动态创建\&lt;script>使用，使用时为src指定一个跨域URL；</p></blockquote>]]></content:encoded>
      
      <comments>http://yoursite.com/2018/12/14/js%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
